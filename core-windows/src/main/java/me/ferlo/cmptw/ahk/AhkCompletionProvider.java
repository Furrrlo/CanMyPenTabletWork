package me.ferlo.cmptw.ahk;

import org.fife.ui.autocomplete.*;

import java.util.Arrays;

public class AhkCompletionProvider extends LanguageAwareCompletionProvider {

    public AhkCompletionProvider() {
        final String baseWebsite = "https://www.autohotkey.com/docs/";
        String website;

        final DefaultCompletionProvider code = new DefaultCompletionProvider();
        // Keywords
        website = baseWebsite + "commands/";
        code.addCompletion(new BasicCompletion(code, "if", null, "Specifies one or more <a href=\"" + website + "../Concepts.htm#statement\">statements</a> to execute if an <a href=\"" + website + "../Variables.htm#Expressions\">expression</a> evaluates to true.<br><p>See <a href=\"" + website + "IfExpression.htm\">If (expression)</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifEqual", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value for equality. Synonymous with: <code>if Var = Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfEqual / IfNotEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifNotEqual", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value for equality. Synonymous with: <code>if Var != Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfEqual / IfNotEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifExist", null, "Checks for the existence of a file or folder.<br><p>See <a href=\"" + website + "IfExist.htm\">IfExist / IfNotExist</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifNotExist", null, "Checks for the existence of a file or folder.<br><p>See <a href=\"" + website + "IfExist.htm\">IfExist / IfNotExist</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifGreater", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value. Synonymous with: <code>if Var &gt; Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfGreater / IfGreaterOrEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifGreaterOrEqual", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value. Synonymous with: <code>if Var &gt;= Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfGreater / IfGreaterOrEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifInString", null, "Checks if a <a href=\"" + website + "../Variables.htm\">variable</a> contains the specified string.<br><p>See <a href=\"" + website + "IfInString.htm\">IfInString / IfNotInString</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifNotInString", null, "Checks if a <a href=\"" + website + "../Variables.htm\">variable</a> doesn't contain the specified string.<br><p>See <a href=\"" + website + "IfInString.htm\">IfInString / IfNotInString</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifLess", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value. Synonymous with: <code>if Var &lt; Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfLess / IfLessOrEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifLessOrEqual", null, "Compares a <a href=\"" + website + "../Variables.htm\">variable</a> to a value. Synonymous with: <code>if Var &lt;= Value</code>.<br><p>See <a href=\"" + website + "IfEqual.htm\">IfLess / IfLessOrEqual</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifMsgBox", null, "Checks which button was pushed by the user during the most recent <a href=\"" + website + "MsgBox.htm\">MsgBox</a> command.<br><p>See <a href=\"" + website + "IfMsgBox.htm\">IfMsgBox</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifWinActive", null, "Checks if the specified window exists and is currently active (foremost).<br><p>See <a href=\"" + website + "IfWinActive.htm\">IfWinActive / IfWinNotActive</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifWinNotActive", null, "Checks if the specified window doesn't exists or is currently not active (foremost).<br><p>See <a href=\"" + website + "IfWinActive.htm\">IfWinActive / IfWinNotActive</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifWinExist", null, "Checks if the specified window exists.<br><p>See <a href=\"" + website + "IfWinExist.htm\">IfWinExist / IfWinNotExist</a></p>"));
        code.addCompletion(new BasicCompletion(code, "ifWinNotExist", null, "Checks if the specified window doesn't exist.<br><p>See <a href=\"" + website + "IfWinExist.htm\">IfWinExist / IfWinNotExist</a></p>"));
        code.addCompletion(new BasicCompletion(code, "else", null, "Specifies one or more <a href=\"" + website + "../Concepts.htm#statement\">statements</a> to execute if an <a href=\"" + website + "../Language.htm#if-statement\">If statement</a> evaluates to false.<br><p>See <a href=\"" + website + "Else.htm\">Else</a></p>"));
        code.addCompletion(new BasicCompletion(code, "while", null, "Performs a series of commands repeatedly until the specified <a href=\"" + website + "../Variables.htm#Expressions\">expression</a> evaluates to false.<br><p>See <a href=\"" + website + "While.htm\">While-loop</a></p>"));
        code.addCompletion(new BasicCompletion(code, "loop", null, "Performs a series of commands repeatedly: either the specified number of times or until <a href=\"" + website + "Break.htm\">break</a> is encountered.<br><p>See <a href=\"" + website + "Loop.htm\">Loop (normal)</a></p>"));
        code.addCompletion(new BasicCompletion(code, "for", null, "Repeats a series of commands once for each key-value pair in an object.<br><p>See <a href=\"" + website + "For.htm\">For</a></p>"));
        code.addCompletion(new BasicCompletion(code, "until", null, "Applies a condition to the continuation of a Loop or For-loop.<br><p>See <a href=\"" + website + "Until.htm\">Until</a></p>"));
        code.addCompletion(new BasicCompletion(code, "break", null, "Exits (terminates) any type of <a href=\"" + website + "../Language.htm#loop-statement\">loop statement</a>.<br><p>See <a href=\"" + website + "Break.htm\">Break</a></p>"));
        code.addCompletion(new BasicCompletion(code, "continue", null, "Skips the rest of a <a href=\"" + website + "../Language.htm#loop-statement\">loop statement</a>'s current iteration and begins a new one.<br><p>See <a href=\"" + website + "Continue.htm\">Continue</a></p>"));
        code.addCompletion(new BasicCompletion(code, "gosub", null, "Jumps to the specified label and continues execution until <a href=\"" + website + "Return.htm\">Return</a> is encountered.<br><p>See <a href=\"" + website + "Gosub.htm\">Gosub</a></p>"));
        code.addCompletion(new BasicCompletion(code, "goto", null, "Jumps to the specified label and continues execution.<br><p>See <a href=\"" + website + "Goto.htm\">Goto</a></p>"));
        code.addCompletion(new BasicCompletion(code, "return"));
        code.addCompletion(new BasicCompletion(code, "try", null, "Guards one or more statements (commands or expressions) against runtime errors and exceptions thrown by the <a href=\"" + website + "Throw.htm\">throw</a> command.<br><p>See <a href=\"" + website + "Try.htm\">Try</a></p>"));
        code.addCompletion(new BasicCompletion(code, "catch", null, "Specifies the code to execute if an exception is raised during execution of a <a href=\"" + website + "Try.htm\">try</a> statement.<br><p>See <a href=\"" + website + "Catch.htm\">Catch</a></p>"));
        code.addCompletion(new BasicCompletion(code, "throw", null, "Signals the occurrence of an error. This signal can be caught by a <a href=\"" + website + "Try.htm\">try</a>-<a href=\"" + website + "Catch.htm\">catch</a> statement.<br><p>See <a href=\"" + website + "Throw.htm\">Throw</a></p>"));
        code.addCompletion(new BasicCompletion(code, "finally", null, "Ensures that one or more statements are always executed after a <a href=\"" + website + "Try.htm\">Try</a> statement finishes.<br><p>See <a href=\"" + website + "Finally.htm\">Finally</a></p>"));
        code.addCompletion(new BasicCompletion(code, "static"));
        code.addCompletion(new BasicCompletion(code, "global"));
        code.addCompletion(new BasicCompletion(code, "local"));
        code.addCompletion(new BasicCompletion(code, "byref"));
        code.addCompletion(new BasicCompletion(code, "class"));
        code.addCompletion(new BasicCompletion(code, "switch", null, "Executes one case from a list of mutually exclusive candidates.<br><p>See <a href=\"" + website + "Switch.htm\">Switch</a></p>"));
        code.addCompletion(new BasicCompletion(code, "case", null, "<p>See <a href=\"" + website + "Switch.htm\">Switch</a></p>"));
        // Variables
        website = baseWebsite;
        code.addCompletion(variableCompletion(code, "A_Space", "", "This variable contains a single space character. See <a href=\"" + website + "commands/AutoTrim.htm\">AutoTrim</a> for details."));
        code.addCompletion(variableCompletion(code, "A_Tab", "", "This variable contains a single tab character. See <a href=\"" + website + "commands/AutoTrim.htm\">AutoTrim</a> for details."));
        code.addCompletion(variableCompletion(code, "A_Args", "", "Contains an <a href=\"" + website + "Objects.htm#Usage_Simple_Arrays\">array</a> of command line parameters. For details, see <a href=\"" + website + "Scripts.htm#cmd\">Passing Command Line Parameters to a Script</a>."));
        code.addCompletion(variableCompletion(code, "A_WorkingDir", "", "The script's current working directory, which is where files will be accessed by default. The final backslash is not included unless it is the root directory. Two examples: C:\\ and C:\\My Documents. Use <a href=\"" + website + "commands/SetWorkingDir.htm\">SetWorkingDir</a> to change the working directory."));
        code.addCompletion(variableCompletion(code, "A_ScriptDir", "", "The full path of the directory where the current script is located. The final backslash is omitted (even for root directories)."));
        code.addCompletion(variableCompletion(code, "A_ScriptName", "", "<p>The file name of the current script, without its path, e.g. MyScript.ahk</p><p>If the script is <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled</a> or <a href=\"" + website + "Program.htm#embedded-scripts\">embedded</a>, this is the name of the current executable file.</p>"));
        code.addCompletion(variableCompletion(code, "A_ScriptFullPath", "", "<p>The full path of the current script, e.g. C:\\Scripts\\My Script.ahk</p><p>If the script is <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled</a> or <a href=\"" + website + "Program.htm#embedded-scripts\">embedded</a>, this is the full path of the current executable file.</p>"));
        code.addCompletion(variableCompletion(code, "A_ScriptHwnd", "", "The unique ID (HWND/handle) of the script's hidden <a href=\"" + website + "Program.htm#main-window\">main window</a>."));
        code.addCompletion(variableCompletion(code, "A_LineNumber", "", "<p>The number of the currently executing line within the script (or one of its <a href=\"" + website + "commands/_Include.htm\">#Include files</a>). This line number will match the one shown by <a href=\"" + website + "commands/ListLines.htm\">ListLines</a>; it can be useful for error reporting such as this example: <code>MsgBox Could not write to log file (line number %A_LineNumber%)</code>.</p><p>Since a <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled script</a> has merged all its <a href=\"" + website + "commands/_Include.htm\">#Include files</a> into one big script, its line numbering may be different than when it is run in non-compiled mode.</p>"));
        code.addCompletion(variableCompletion(code, "A_LineFile", "", "<p>The full path and name of the file to which <a href=\"" + website + "#LineNumber\">A_LineNumber</a> belongs. If the script was loaded from an external file, this is the same as <a href=\"" + website + "#ScriptFullPath\">A_ScriptFullPath</a> unless the line belongs to one of the script's <a href=\"" + website + "commands/_Include.htm\">#Include files</a>.</p><p>If the script was <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled</a> based on a <a href=\"" + website + "Scripts.htm#ahk2exe-base\">.bin file</a>, this is the full path and name of the current executable file, the same as <a href=\"" + website + "#ScriptFullPath\">A_ScriptFullPath</a>.</p><p><span class=\"ver\">[v1.1.34+]:</span> If the script is <a href=\"" + website + "Program.htm#embedded-scripts\">embedded</a>, A_LineFile contains an asterisk (*) followed by the resource name; e.g. *#1</p>"));
        code.addCompletion(variableCompletion(code, "A_ThisFunc", "", "The name of the <a href=\"" + website + "Functions.htm\">user-defined function</a> that is currently executing (blank if none); for example: MyFunction. See also: <a href=\"" + website + "commands/IsFunc.htm\">IsFunc()</a>"));
        code.addCompletion(variableCompletion(code, "A_ThisLabel", "", "The name of the <a href=\"" + website + "misc/Labels.htm\">label</a> (subroutine) that is currently executing (blank if none); for example: MyLabel. It is updated whenever the script executes <a href=\"" + website + "commands/Gosub.htm\">Gosub</a>/<a href=\"" + website + "commands/Return.htm\">Return</a> or <a href=\"" + website + "commands/Goto.htm\">Goto</a>. It is also updated for automatically-called labels such as <a href=\"" + website + "commands/SetTimer.htm\">timers</a>, <a href=\"" + website + "commands/Gui.htm#DefaultWin\">GUI threads</a>, <a href=\"" + website + "commands/Menu.htm\">menu items</a>, <a href=\"" + website + "Hotkeys.htm\">hotkeys</a>, <a href=\"" + website + "Hotstrings.htm\">hotstrings</a>, <a href=\"" + website + "commands/OnClipboardChange.htm#label\">OnClipboardChange labels</a>, and <a href=\"" + website + "commands/OnExit.htm#command\">OnExit labels</a>. However, A_ThisLabel is not updated when execution \"falls into\" a label from above; when that happens, A_ThisLabel retains its previous value. See also: <a href=\"" + website + "#ThisHotkey\">A_ThisHotkey</a> and <a href=\"" + website + "commands/IsLabel.htm\">IsLabel()</a>"));
        code.addCompletion(variableCompletion(code, "A_AhkVersion", "", "In versions prior to 1.0.22, this variable is blank. Otherwise, it contains the version of AutoHotkey that is running the script, such as 1.0.22. In the case of a <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled script</a>, the version that was originally used to compile it is reported. The formatting of the version number allows a script to check whether A_AhkVersion is greater than some minimum version number with &gt; or &gt;= as in this example: <code>if A_AhkVersion &gt;= 1.0.25.07</code>."));
        code.addCompletion(variableCompletion(code, "A_AhkPath", "", "<p>For non-compiled or <a href=\"" + website + "Program.htm#embedded-scripts\">embedded</a> scripts: The full path and name of the EXE file that is actually running the current script. For example: C:\\Program Files\\AutoHotkey\\AutoHotkey.exe</p><p>For <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled scripts</a> based on a <a href=\"" + website + "Scripts.htm#ahk2exe-base\">.bin file</a>, the value is determined by reading the installation directory from the registry and appending \"\\AutoHotkey.exe\". If AutoHotkey is not installed, the value is blank. The example below is equivalent:</p><pre>RegRead InstallDir, HKLM\\SOFTWARE\\AutoHotkey, InstallDir<br>AhkPath := ErrorLevel ? \"\" : InstallDir \"\\AutoHotkey.exe\"</pre><p><span class=\"ver\">[v1.1.34+]:</span> For compiled scripts based on an .exe file, A_AhkPath contains the full path of the compiled script. This can be used in combination with <a href=\"" + website + "Scripts.htm#SlashScript\">/script</a> to execute external scripts. To instead locate the installed copy of AutoHotkey, read the registry as shown above.</p>"));
        code.addCompletion(variableCompletion(code, "A_IsUnicode", "", "<p>Contains 1 if strings are Unicode (16-bit) and an empty string (which is considered <a href=\"" + website + "#Boolean\">false</a>) if strings are ANSI (8-bit). The format of strings depends on the version of AutoHotkey.exe which is used to run the script, or if it is compiled, which bin file was used to compile it.</p><p>For ANSI executables prior to <span class=\"ver\">[v1.1.06]</span>, A_IsUnicode was left undefined; that is, the script could assign to it, and attempting to read it could trigger a <a href=\"" + website + "commands/_Warn.htm\">UseUnsetGlobal warning</a>. In later versions it is always defined and is read-only.</p>"));
        code.addCompletion(variableCompletion(code, "A_IsCompiled", "", "<p>Contains 1 if the script is running as a <a href=\"" + website + "Scripts.htm#ahk2exe\">compiled EXE</a> and an empty string (which is considered <a href=\"" + website + "#Boolean\">false</a>) if it is not.</p><p>For non-compiled scripts prior to <span class=\"ver\">[v1.1.06]</span>, A_IsCompiled was left undefined; that is, the script could assign to it, and attempting to read it could trigger a <a href=\"" + website + "commands/_Warn.htm\">UseUnsetGlobal warning</a>. In later versions it is always defined and is read-only.</p>"));
        code.addCompletion(variableCompletion(code, "A_ExitReason", "", "The most recent reason the script was asked to terminate. This variable is blank unless the script has an <a href=\"" + website + "commands/OnExit.htm#command\">OnExit</a> subroutine and that subroutine is currently running or has been called at least once by an exit attempt. See <a href=\"" + website + "commands/OnExit.htm#command\">OnExit</a> for details."));
        code.addCompletion(variableCompletion(code, "A_YYYY", "", "<p>Current 4-digit year (e.g. 2004). Synonymous with A_Year.</p><p class=\"note\"><strong>Note</strong>: To retrieve a formatted time or date appropriate for your locale and language, use <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar</code> (time and long date) or <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar,, LongDate</code> (retrieves long-format date).</p>"));
        code.addCompletion(variableCompletion(code, "A_Year", "", "<p>Current 4-digit year (e.g. 2004). Synonymous with A_YYYY.</p><p class=\"note\"><strong>Note</strong>: To retrieve a formatted time or date appropriate for your locale and language, use <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar</code> (time and long date) or <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar,, LongDate</code> (retrieves long-format date).</p>"));
        code.addCompletion(variableCompletion(code, "A_MM", "", "Current 2-digit month (01-12). Synonymous with A_Mon."));
        code.addCompletion(variableCompletion(code, "A_Mon", "", "Current 2-digit month (01-12). Synonymous with A_MM."));
        code.addCompletion(variableCompletion(code, "A_DD", "", "Current 2-digit day of the month (01-31). Synonymous with A_MDay."));
        code.addCompletion(variableCompletion(code, "A_MDay", "", "Current 2-digit day of the month (01-31). Synonymous with A_DD."));
        code.addCompletion(variableCompletion(code, "A_MMMM", "", "Current month's full name in the current user's language, e.g. July"));
        code.addCompletion(variableCompletion(code, "A_MMM", "", "Current month's abbreviation in the current user's language, e.g. Jul"));
        code.addCompletion(variableCompletion(code, "A_DDDD", "", "Current day of the week's full name in the current user's language, e.g. Sunday"));
        code.addCompletion(variableCompletion(code, "A_DDD", "", "Current day of the week's abbreviation in the current user's language, e.g. Sun"));
        code.addCompletion(variableCompletion(code, "A_WDay", "", "Current 1-digit day of the week (1-7). 1 is Sunday in all locales."));
        code.addCompletion(variableCompletion(code, "A_YDay", "", "Current day of the year (1-366). The value is not zero-padded, e.g. 9 is retrieved, not 009. To retrieve a zero-padded value, use the following: <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar,, YDay0</code>."));
        code.addCompletion(variableCompletion(code, "A_YWeek", "", "Current year and week number (e.g. 200453) according to ISO 8601. To separate the year from the week, use <code>Year := <a href=\"" + website + "commands/SubStr.htm\">SubStr</a>(A_YWeek, 1, 4)</code> and <code>Week := <a href=\"" + website + "commands/SubStr.htm\">SubStr</a>(A_YWeek, -1)</code>. Precise definition of A_YWeek: If the week containing January 1st has four or more days in the new year, it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1."));
        code.addCompletion(variableCompletion(code, "A_Hour", "", "Current 2-digit hour (00-23) in 24-hour time (for example, 17 is 5pm). To retrieve 12-hour time as well as an AM/PM indicator, follow this example: <code><a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a>, OutputVar, , h:mm:ss tt</code>"));
        code.addCompletion(variableCompletion(code, "A_Min", "", "<p>Current 2-digit minute (00-59).</p>"));
        code.addCompletion(variableCompletion(code, "A_Sec", "", "Current 2-digit second (00-59)."));
        code.addCompletion(variableCompletion(code, "A_MSec", "", "Current 3-digit millisecond (000-999). To remove the leading zeros, follow this example: <code>Milliseconds := A_MSec + 0</code>."));
        code.addCompletion(variableCompletion(code, "A_Now", "", "<p>The current local time in <a href=\"" + website + "commands/FileSetTime.htm#YYYYMMDD\">YYYYMMDDHH24MISS</a> format.</p><p class=\"note\"><strong>Note</strong>: Date and time math can be performed with <a href=\"" + website + "commands/EnvAdd.htm\">EnvAdd</a> and <a href=\"" + website + "commands/EnvSub.htm\">EnvSub</a>. Also, <a href=\"" + website + "commands/FormatTime.htm\">FormatTime</a> can format the date and/or time according to your locale or preferences.</p>"));
        code.addCompletion(variableCompletion(code, "A_NowUTC", "", "The current Coordinated Universal Time (UTC) in <a href=\"" + website + "commands/FileSetTime.htm#YYYYMMDD\">YYYYMMDDHH24MISS</a> format. UTC is essentially the same as Greenwich Mean Time (GMT)."));
        code.addCompletion(variableCompletion(code, "A_TickCount", "", "<p>The number of milliseconds that have elapsed since the system was started, up to 49.7 days. By storing A_TickCount in a variable, elapsed time can later be measured by subtracting that variable from the latest A_TickCount value. For example:</p><pre>StartTime := A_TickCount<br>Sleep, 1000<br>ElapsedTime := A_TickCount - StartTime<br>MsgBox,  %ElapsedTime% milliseconds have elapsed.</pre><br><p>If you need more precision than A_TickCount's 10ms, use <a href=\"" + website + "commands/DllCall.htm#QPC\">QueryPerformanceCounter()</a>.</p>"));
        code.addCompletion(variableCompletion(code, "A_IsSuspended", "", "Contains 1 if the script is <a href=\"" + website + "commands/Suspend.htm\">suspended</a> and 0 otherwise."));
        code.addCompletion(variableCompletion(code, "A_IsPaused", "", "Contains 1 if the <a href=\"" + website + "misc/Threads.htm\">thread</a> immediately underneath the current thread is <a href=\"" + website + "commands/Pause.htm\">paused</a>. Otherwise it contains 0."));
        code.addCompletion(variableCompletion(code, "A_IsCritical", "", "Contains 0 if <a href=\"" + website + "commands/Critical.htm\">Critical</a> is off for the <a href=\"" + website + "misc/Threads.htm\">current thread</a>. Otherwise it contains an integer greater than zero, namely the <a href=\"" + website + "commands/Critical.htm#Interval\">message-check frequency</a> being used by Critical. Since <code>Critical 0</code> turns off critical, the current state of Critical can be saved and restored via <code>Old_IsCritical := A_IsCritical</code> followed later by <code>Critical %Old_IsCritical%</code>."));
        code.addCompletion(variableCompletion(code, "A_BatchLines", "", "(synonymous with A_NumBatchLines) The current value as set by <a href=\"" + website + "commands/SetBatchLines.htm\">SetBatchLines</a>. Examples: 200 or 10ms (depending on format)."));
        code.addCompletion(variableCompletion(code, "A_NumBatchLines", "", "(synonymous with A_BatchLines) The current value as set by <a href=\"" + website + "commands/SetBatchLines.htm\">SetBatchLines</a>. Examples: 200 or 10ms (depending on format)."));
        code.addCompletion(variableCompletion(code, "A_ListLines", "", "Contains 1 if <a href=\"" + website + "commands/ListLines.htm\">ListLines</a> is enabled. Otherwise it contains 0."));
        code.addCompletion(variableCompletion(code, "A_TitleMatchMode", "", "The current mode set by <a href=\"" + website + "commands/SetTitleMatchMode.htm\">SetTitleMatchMode</a>: 1, 2, 3, or RegEx."));
        code.addCompletion(variableCompletion(code, "A_TitleMatchModeSpeed", "", "The current match speed (fast or slow) set by <a href=\"" + website + "commands/SetTitleMatchMode.htm\">SetTitleMatchMode</a>."));
        code.addCompletion(variableCompletion(code, "A_DetectHiddenWindows", "", "The current mode (On or Off) set by <a href=\"" + website + "commands/DetectHiddenWindows.htm\">DetectHiddenWindows</a>."));
        code.addCompletion(variableCompletion(code, "A_DetectHiddenText", "", "The current mode (On or Off) set by <a href=\"" + website + "commands/DetectHiddenText.htm\">DetectHiddenText</a>."));
        code.addCompletion(variableCompletion(code, "A_AutoTrim", "", "The current mode (On or Off) set by <a href=\"" + website + "commands/AutoTrim.htm\">AutoTrim</a>."));
        code.addCompletion(variableCompletion(code, "A_StringCaseSense", "", "The current mode (On, Off, or Locale) set by <a href=\"" + website + "commands/StringCaseSense.htm\">StringCaseSense</a>."));
        code.addCompletion(variableCompletion(code, "A_FileEncoding", "", "<span class=\"ver\">[AHK_L 46+]</span>: Contains the default encoding for various commands; see <a href=\"" + website + "commands/FileEncoding.htm\">FileEncoding</a>."));
        code.addCompletion(variableCompletion(code, "A_FormatInteger", "", "The current integer format (H or D) set by <a href=\"" + website + "commands/SetFormat.htm\">SetFormat</a>. <span class=\"ver\">[AHK_L 42+]:</span> This may also contain lower-case h."));
        code.addCompletion(variableCompletion(code, "A_FormatFloat", "", "The current floating point number format set by <a href=\"" + website + "commands/SetFormat.htm\">SetFormat</a>."));
        code.addCompletion(variableCompletion(code, "A_SendMode", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Event, Input, Play or InputThenPlay) set by  <a href=\"" + website + "commands/SendMode.htm\">SendMode</a>."));
        code.addCompletion(variableCompletion(code, "A_SendLevel", "", "<span class=\"ver\">[v1.1.23+]:</span> The current <a href=\"" + website + "commands/SendLevel.htm\">SendLevel</a> setting (an integer between 0 and 100, inclusive)."));
        code.addCompletion(variableCompletion(code, "A_StoreCapsLockMode", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (On or Off) set by <a href=\"" + website + "commands/SetStoreCapslockMode.htm\">SetStoreCapsLockMode</a>."));
        code.addCompletion(variableCompletion(code, "A_KeyDelay", "", "The current delay set by <a href=\"" + website + "commands/SetKeyDelay.htm\">SetKeyDelay</a> (always decimal, not hex). A_KeyDuration requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_KeyDuration", "", "The current duration set by <a href=\"" + website + "commands/SetKeyDelay.htm\">SetKeyDelay</a> (always decimal, not hex). A_KeyDuration requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_KeyDelayPlay", "", "The current delay set by <a href=\"" + website + "commands/SetKeyDelay.htm\">SetKeyDelay</a> for the <a href=\"" + website + "commands/Send.htm#SendPlayDetail\">SendPlay</a> mode (always decimal, not hex). Requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_KeyDurationPlay", "", "The current duration set by <a href=\"" + website + "commands/SetKeyDelay.htm\">SetKeyDelay</a> for the <a href=\"" + website + "commands/Send.htm#SendPlayDetail\">SendPlay</a> mode (always decimal, not hex). Requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_WinDelay", "", "The current delay set by <a href=\"" + website + "commands/SetWinDelay.htm\">SetWinDelay</a> (always decimal, not hex)."));
        code.addCompletion(variableCompletion(code, "A_ControlDelay", "", "The current delay set by <a href=\"" + website + "commands/SetControlDelay.htm\">SetControlDelay</a> (always decimal, not hex)."));
        code.addCompletion(variableCompletion(code, "A_MouseDelay", "", "The current delay set by <a href=\"" + website + "commands/SetMouseDelay.htm\">SetMouseDelay</a> (always decimal, not hex). A_MouseDelay is for the traditional SendEvent mode, whereas A_MouseDelayPlay is for <a href=\"" + website + "commands/Send.htm#SendPlayDetail\">SendPlay</a>. A_MouseDelayPlay requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_MouseDelayPlay", "", "The current delay set by <a href=\"" + website + "commands/SetMouseDelay.htm\">SetMouseDelay</a> (always decimal, not hex). A_MouseDelay is for the traditional SendEvent mode, whereas A_MouseDelayPlay is for <a href=\"" + website + "commands/Send.htm#SendPlayDetail\">SendPlay</a>. A_MouseDelayPlay requires <span class=\"ver\">[v1.1.23+]</span>."));
        code.addCompletion(variableCompletion(code, "A_DefaultMouseSpeed", "", "The current speed set by <a href=\"" + website + "commands/SetDefaultMouseSpeed.htm\">SetDefaultMouseSpeed</a> (always decimal, not hex)."));
        code.addCompletion(variableCompletion(code, "A_CoordModeToolTip", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Window, Client or Screen) set by <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a>."));
        code.addCompletion(variableCompletion(code, "A_CoordModePixel", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Window, Client or Screen) set by <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a>."));
        code.addCompletion(variableCompletion(code, "A_CoordModeMouse", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Window, Client or Screen) set by <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a>."));
        code.addCompletion(variableCompletion(code, "A_CoordModeCaret", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Window, Client or Screen) set by <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a>."));
        code.addCompletion(variableCompletion(code, "A_CoordModeMenu", "", "<span class=\"ver\">[v1.1.23+]:</span> The current mode (Window, Client or Screen) set by <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a>."));
        code.addCompletion(variableCompletion(code, "A_RegView", "", "<span class=\"ver\">[v1.1.08+]:</span> The current registry view as set by <a href=\"" + website + "commands/SetRegView.htm\">SetRegView</a>."));
        code.addCompletion(variableCompletion(code, "A_IconHidden", "", "Contains 1 if the <a href=\"" + website + "Program.htm#tray-icon\">tray icon</a> is currently hidden or 0 otherwise. The icon can be hidden via <a href=\"" + website + "commands/_NoTrayIcon.htm\">#NoTrayIcon</a> or the <a href=\"" + website + "commands/Menu.htm\">Menu</a> command."));
        code.addCompletion(variableCompletion(code, "A_IconTip", "", "Blank unless a custom tooltip for the <a href=\"" + website + "Program.htm#tray-icon\">tray icon</a> has been specified via <code><a href=\"" + website + "commands/Menu.htm\">Menu</a>, Tray, Tip</code> --  in which case it's the text of the tip."));
        code.addCompletion(variableCompletion(code, "A_IconFile", "", "Blank unless a custom <a href=\"" + website + "Program.htm#tray-icon\">tray icon</a> has been specified via <code><a href=\"" + website + "commands/Menu.htm\">Menu</a>, tray, icon</code> -- in which case it's the full path and name of the icon's file."));
        code.addCompletion(variableCompletion(code, "A_IconNumber", "", "Blank if A_IconFile is blank. Otherwise, it's the number of the icon in A_IconFile (typically 1)."));
        code.addCompletion(variableCompletion(code, "A_TimeIdle", "", "The number of milliseconds that have elapsed since the system last received keyboard, mouse, or other input. This is useful for determining whether the user is away. Physical input from the user as well as artificial input generated by <strong>any</strong> program or script (such as the <a href=\"" + website + "commands/Send.htm\">Send</a> or <a href=\"" + website + "commands/MouseMove.htm\">MouseMove</a> commands) will reset this value back to zero. Since this value tends to increase by increments of 10, do not check whether it is equal to another value. Instead, check whether it is greater or less than another value. For example: <code>IfGreater, A_TimeIdle, 600000, MsgBox, The last keyboard or mouse activity was at least 10 minutes ago</code>."));
        code.addCompletion(variableCompletion(code, "A_TimeIdlePhysical", "", "Similar to above but ignores artificial keystrokes and/or mouse clicks whenever the corresponding hook (<a href=\"" + website + "commands/_InstallKeybdHook.htm\">keyboard</a> or <a href=\"" + website + "commands/_InstallMouseHook.htm\">mouse</a>) is installed; that is, it responds only to physical events. (This prevents simulated keystrokes and mouse clicks from falsely indicating that a user is present.) If neither hook is installed, this variable is equivalent to A_TimeIdle. If only one hook is installed, only its type of physical input affects A_TimeIdlePhysical (the other/non-installed hook's input, both physical and artificial, has no effect)."));
        code.addCompletion(variableCompletion(code, "A_TimeIdleKeyboard", "", "If the <a href=\"" + website + "commands/_InstallKeybdHook.htm\">keyboard hook</a> is installed, this is the number of milliseconds that have elapsed since the system last received physical keyboard input. Otherwise, this variable is equivalent to A_TimeIdle."));
        code.addCompletion(variableCompletion(code, "A_TimeIdleMouse", "", "If the <a href=\"" + website + "commands/_InstallMouseHook.htm\">mouse hook</a> is installed, this is the number of milliseconds that have elapsed since the system last received physical mouse input. Otherwise, this variable is equivalent to A_TimeIdle."));
        code.addCompletion(variableCompletion(code, "A_DefaultGui", "", "The name or number of the current thread's <a href=\"" + website + "commands/Gui.htm#Default\">default GUI</a>."));
        code.addCompletion(variableCompletion(code, "A_DefaultListView", "", "The <a href=\"" + website + "commands/Gui.htm#Events\">variable name</a> or <a href=\"" + website + "commands/Gui.htm#HwndOutputVar\">HWND</a> of the <a href=\"" + website + "commands/ListView.htm\">ListView control</a> upon which the <a href=\"" + website + "commands/ListView.htm#BuiltIn\">ListView functions</a> operate. If the default GUI lacks a ListView, this variable is blank."));
        code.addCompletion(variableCompletion(code, "A_DefaultTreeView", "", "The <a href=\"" + website + "commands/Gui.htm#Events\">variable name</a> or <a href=\"" + website + "commands/Gui.htm#HwndOutputVar\">HWND</a> of the <a href=\"" + website + "commands/TreeView.htm\">TreeView control</a> upon which the <a href=\"" + website + "commands/TreeView.htm#BuiltIn\">TreeView functions</a> operate. If the default GUI lacks a TreeView, this variable is blank."));
        code.addCompletion(variableCompletion(code, "A_Gui", "", "The name or number of the <a href=\"" + website + "commands/Gui.htm\">GUI</a> that launched the <a href=\"" + website + "misc/Threads.htm\">current thread</a>. This variable is blank unless a Gui control, menu bar item, or event such as GuiClose/GuiEscape launched the current thread."));
        code.addCompletion(variableCompletion(code, "A_GuiControl", "", "The name of the variable associated with the GUI control that launched  the <a href=\"" + website + "misc/Threads.htm\">current thread</a>. If that control lacks an <a href=\"" + website + "commands/Gui.htm#Events\">associated variable</a>, A_GuiControl instead contains the first 63 characters of the control's text/caption (this is most often used to avoid giving each button a variable name). A_GuiControl  is blank whenever: 1) A_Gui is blank; 2) a GUI menu bar item or event such as GuiClose/GuiEscape launched the current thread; 3) the control lacks an associated variable and has no caption; or 4) The control that originally launched the current thread no longer exists (perhaps due to <a href=\"" + website + "commands/Gui.htm#Destroy\">Gui Destroy</a>)."));
        code.addCompletion(variableCompletion(code, "A_GuiWidth", "", "The GUI window's width when referenced in a <a href=\"" + website + "commands/Gui.htm#GuiSize\">GuiSize subroutine</a>. It applies to the window's client area, which is the area excluding title bar, menu bar, and borders. <span class=\"ver\">[v1.1.11+]:</span> This value is affected by <a href=\"" + website + "commands/Gui.htm#DPIScale\">DPI scaling</a>."));
        code.addCompletion(variableCompletion(code, "A_GuiHeight", "", "The GUI window's height when referenced in a <a href=\"" + website + "commands/Gui.htm#GuiSize\">GuiSize subroutine</a>. It applies to the window's client area, which is the area excluding title bar, menu bar, and borders. <span class=\"ver\">[v1.1.11+]:</span> This value is affected by <a href=\"" + website + "commands/Gui.htm#DPIScale\">DPI scaling</a>."));
        code.addCompletion(variableCompletion(code, "A_GuiX", "", "The X coordinate for <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a> and <a href=\"" + website + "commands/Gui.htm#GuiDropFiles\">GuiDropFiles</a> events. Coordinates are relative to the upper-left corner of the window. <span class=\"ver\">[v1.1.11+]:</span> This value is affected by <a href=\"" + website + "commands/Gui.htm#DPIScale\">DPI scaling</a>."));
        code.addCompletion(variableCompletion(code, "A_GuiY", "", "The Y coordinate for <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a> and <a href=\"" + website + "commands/Gui.htm#GuiDropFiles\">GuiDropFiles</a> events. Coordinates are relative to the upper-left corner of the window. <span class=\"ver\">[v1.1.11+]:</span> This value is affected by <a href=\"" + website + "commands/Gui.htm#DPIScale\">DPI scaling</a>."));
        code.addCompletion(variableCompletion(code, "A_GuiEvent", "", "<p>The type of event that launched the <a href=\"" + website + "misc/Threads.htm\">current thread</a>. If the thread was not launched via <a href=\"" + website + "commands/Gui.htm\">GUI action</a>, this variable is blank. Otherwise, it contains one of the following strings:</p><p><strong>Normal</strong>: The event was triggered by a single left-click or via keystrokes (<kbd>&uarr;</kbd>, <kbd>&rarr;</kbd>, <kbd>&darr;</kbd>, <kbd>&larr;</kbd>, <kbd>Tab</kbd>, <kbd>Space</kbd>, underlined shortcut key, etc.). This value is also used for menu bar items and the special events such as GuiClose and GuiEscape.</p><p><strong>DoubleClick</strong>: The event was triggered by a double-click. Note: The first click of the click-pair will still cause a <em>Normal</em> event to be received first. In other words, the subroutine will be launched twice: once for the first click and again for the second.</p><p><strong>RightClick</strong>: Occurs only for <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a>, <a href=\"" + website + "commands/ListView.htm\">ListViews</a>, and <a href=\"" + website + "commands/TreeView.htm\">TreeViews</a>.</p><p><strong>Context-sensitive values:</strong> For details see <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a>, <a href=\"" + website + "commands/Gui.htm#GuiDropFiles\">GuiDropFiles</a>, <a href=\"" + website + "commands/GuiControls.htm#Slider\">Slider</a>, <a href=\"" + website + "commands/GuiControls.htm#MonthCal\">MonthCal</a>, <a href=\"" + website + "commands/ListView.htm\">ListView</a>, and <a href=\"" + website + "commands/TreeView.htm\">TreeView</a>.</p>"));
        code.addCompletion(variableCompletion(code, "A_GuiControlEvent", "", "<p>The type of event that launched the <a href=\"" + website + "misc/Threads.htm\">current thread</a>. If the thread was not launched via <a href=\"" + website + "commands/Gui.htm\">GUI action</a>, this variable is blank. Otherwise, it contains one of the following strings:</p><p><strong>Normal</strong>: The event was triggered by a single left-click or via keystrokes (<kbd>&uarr;</kbd>, <kbd>&rarr;</kbd>, <kbd>&darr;</kbd>, <kbd>&larr;</kbd>, <kbd>Tab</kbd>, <kbd>Space</kbd>, underlined shortcut key, etc.). This value is also used for menu bar items and the special events such as GuiClose and GuiEscape.</p><p><strong>DoubleClick</strong>: The event was triggered by a double-click. Note: The first click of the click-pair will still cause a <em>Normal</em> event to be received first. In other words, the subroutine will be launched twice: once for the first click and again for the second.</p><p><strong>RightClick</strong>: Occurs only for <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a>, <a href=\"" + website + "commands/ListView.htm\">ListViews</a>, and <a href=\"" + website + "commands/TreeView.htm\">TreeViews</a>.</p><p><strong>Context-sensitive values:</strong> For details see <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a>, <a href=\"" + website + "commands/Gui.htm#GuiDropFiles\">GuiDropFiles</a>, <a href=\"" + website + "commands/GuiControls.htm#Slider\">Slider</a>, <a href=\"" + website + "commands/GuiControls.htm#MonthCal\">MonthCal</a>, <a href=\"" + website + "commands/ListView.htm\">ListView</a>, and <a href=\"" + website + "commands/TreeView.htm\">TreeView</a>.</p>"));
        code.addCompletion(variableCompletion(code, "A_EventInfo", "", "<p>Contains additional information about the following events:</p><ul><li>The <a href=\"" + website + "commands/OnClipboardChange.htm#label\">OnClipboardChange label</a></li><li><a href=\"" + website + "Hotkeys.htm#Wheel\">Mouse wheel hotkeys</a> (WheelDown/Up/Left/Right)</li><li><a href=\"" + website + "commands/OnMessage.htm\">OnMessage()</a></li><li><a href=\"" + website + "commands/RegisterCallback.htm\">RegisterCallback()</a></li><li><a href=\"" + website + "misc/RegExCallout.htm\">Regular Expression Callouts</a></li><li><a href=\"" + website + "commands/Gui.htm#label\">GUI events</a>, namely <a href=\"" + website + "commands/Gui.htm#GuiContextMenu\">GuiContextMenu</a>, <a href=\"" + website + "commands/Gui.htm#GuiDropFiles\">GuiDropFiles</a>, <a href=\"" + website + "commands/GuiControls.htm#ListBox\">ListBox</a>, <a href=\"" + website + "commands/ListView.htm\">ListView</a>, <a href=\"" + website + "commands/TreeView.htm\">TreeView</a>, and <a href=\"" + website + "commands/GuiControls.htm#StatusBar\">StatusBar</a>. If there is no additional information for an event, A_EventInfo contains 0.</li></ul>"));
        code.addCompletion(variableCompletion(code, "A_ThisMenuItem", "", "The name of the most recently selected <a href=\"" + website + "commands/Menu.htm\">custom menu item</a> (blank if none)."));
        code.addCompletion(variableCompletion(code, "A_ThisMenu", "", "The name of the menu from which A_ThisMenuItem was selected."));
        code.addCompletion(variableCompletion(code, "A_ThisMenuItemPos", "", "A number indicating the <u>current</u> position of A_ThisMenuItem within A_ThisMenu. The first item in the menu is 1, the second is 2, and so on. Menu separator lines are counted. This variable is blank if A_ThisMenuItem is blank or no longer exists within A_ThisMenu. It is also blank if A_ThisMenu itself no longer exists."));
        code.addCompletion(variableCompletion(code, "A_ThisHotkey", "", "<p>The most recently executed <a href=\"" + website + "Hotkeys.htm\">hotkey</a> or <a href=\"" + website + "Hotstrings.htm\">non-auto-replace hotstring</a> (blank if none), e.g. #z. This value will change if the <a href=\"" + website + "misc/Threads.htm\">current thread</a> is interrupted by another hotkey, so be sure to copy it into another variable immediately if you need the original value for later use in a subroutine.</p><p>When a hotkey is first created -- either by the <a href=\"" + website + "commands/Hotkey.htm\">Hotkey command</a> or a <a href=\"" + website + "Hotkeys.htm\">double-colon label</a> in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey, shared by all <a href=\"" + website + "commands/_IfWinActive.htm#variant\">variants</a> of the hotkey.</p><p>When a hotstring is first created, the exact text used to create it becomes the permanent name of the hotstring.</p><p>See also: <a href=\"" + website + "#ThisLabel\">A_ThisLabel</a></p>"));
        code.addCompletion(variableCompletion(code, "A_PriorHotkey", "", "Same as above except for the previous hotkey. It will be blank if none."));
        code.addCompletion(variableCompletion(code, "A_PriorKey", "", "<span class=\"ver\">[v1.1.01+]:</span> The name of the last key which was pressed prior to the most recent key-press or key-release, or blank if no applicable key-press can be found in the key history. All input generated by AutoHotkey scripts is excluded. For this variable to be of use, the <a href=\"" + website + "commands/_InstallKeybdHook.htm\">keyboard</a> or <a href=\"" + website + "commands/_InstallMouseHook.htm\">mouse hook</a> must be installed and <a href=\"" + website + "commands/KeyHistory.htm\">key history</a> must be enabled."));
        code.addCompletion(variableCompletion(code, "A_TimeSinceThisHotkey", "", "The number of milliseconds that have elapsed since A_ThisHotkey was pressed. It will be -1 whenever A_ThisHotkey is blank."));
        code.addCompletion(variableCompletion(code, "A_TimeSincePriorHotkey", "", "The number of milliseconds that have elapsed since A_PriorHotkey was pressed.  It will be -1 whenever A_PriorHotkey is blank."));
        code.addCompletion(variableCompletion(code, "A_EndChar", "", "The <a href=\"" + website + "Hotstrings.htm#EndChars\">ending character</a> that was pressed by the user to trigger the most recent <a href=\"" + website + "Hotstrings.htm\">non-auto-replace hotstring</a>. If no ending character was required  (due to the * option), this variable will be blank."));
        code.addCompletion(variableCompletion(code, "ComSpec", "", "<p>Contains the same string as the environment's ComSpec variable. Often used with <a href=\"" + website + "commands/Run.htm\">Run/RunWait</a>. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Windows\\system32\\cmd.exe</pre>"));
        code.addCompletion(variableCompletion(code, "A_ComSpec", "", "<p>Contains the same string as the environment's ComSpec variable. Often used with <a href=\"" + website + "commands/Run.htm\">Run/RunWait</a>. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Windows\\system32\\cmd.exe</pre>"));
        code.addCompletion(variableCompletion(code, "A_Temp", "", "<p>The full path and name of the folder designated to hold temporary files. It is retrieved from one of the following locations (in order): 1) the <a href=\"" + website + "Concepts.htm#environment-variables\">environment variables</a> TMP, TEMP, or USERPROFILE; 2) the Windows directory. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\AppData\\Local\\Temp</pre>"));
        code.addCompletion(variableCompletion(code, "A_OSType", "", "The type of operating system being run. Since AutoHotkey 1.1 only supports NT-based operating systems, this is always WIN32_NT. Older versions of AutoHotkey return WIN32_WINDOWS when run on Windows 95/98/ME."));
        code.addCompletion(variableCompletion(code, "A_OSVersion", "", "<p>One of the following strings, if appropriate: WIN_7 <span class=\"ver\">[requires AHK_L 42+]</span>, WIN_8 <span class=\"ver\">[requires v1.1.08+]</span>, WIN_8.1 <span class=\"ver\">[requires v1.1.15+]</span>, WIN_VISTA, WIN_2003, WIN_XP, WIN_2000.</p><p>Applying compatibility settings in the AutoHotkey executable or compiled script's properties causes the OS to report a different version number, which is reflected by A_OSVersion.</p><p><span class=\"ver\">[v1.1.20+]:</span> If the OS version is not recognized as one of those listed above, a string in the format \"major.minor.build\" is returned. For example, <code>10.0.14393</code> is Windows 10 build 14393, also known as version 1607.</p><pre><em>; This example is obsolete as these operating systems are no longer supported.</em><br>if A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Note: No spaces around commas.</em><br>{MsgBox This script requires Windows 2000/XP or later.ExitApp<br>}</pre>"));
        code.addCompletion(variableCompletion(code, "A_Is64bitOS", "", "<span class=\"ver\">[v1.1.08+]:</span> Contains 1 (true) if the OS is 64-bit or 0 (false) if it is 32-bit."));
        code.addCompletion(variableCompletion(code, "A_PtrSize", "", "<span class=\"ver\">[AHK_L 42+]:</span> Contains the size of a pointer, in bytes.  This is either 4 (32-bit) or 8 (64-bit), depending on what type of executable (EXE) is running the script."));
        code.addCompletion(variableCompletion(code, "A_Language", "", "The system's default language, which is one of <a href=\"" + website + "misc/Languages.htm\">these 4-digit codes</a>."));
        code.addCompletion(variableCompletion(code, "A_ComputerName", "", "The name of the computer as seen on the network."));
        code.addCompletion(variableCompletion(code, "A_UserName", "", "The logon name of the user who launched this script."));
        code.addCompletion(variableCompletion(code, "A_WinDir", "", "The Windows directory. For example: <code>C:\\Windows</code>"));
        code.addCompletion(variableCompletion(code, "A_ProgramFiles", "", "<p>The Program Files directory (e.g. <code>C:\\Program Files</code> or <code>C:\\Program Files (x86)</code>). This is usually the same as the <em>ProgramFiles</em> <a href=\"" + website + "Concepts.htm#environment-variables\">environment variable</a>.</p><p>On <a href=\"" + website + "#Is64bitOS\">64-bit systems</a> (and not 32-bit systems), the following applies:</p><ul><li>If the executable (EXE) that is running the script is 32-bit, A_ProgramFiles returns the path of the \"Program Files (x86)\" directory.</li><li>For 32-bit processes, the <em>ProgramW6432</em> environment variable contains the path of the 64-bit Program Files directory. On Windows 7 and later, it is also set for 64-bit processes.</li><li>The <em>ProgramFiles(x86)</em> environment variable contains the path of the 32-bit Program Files directory.</li></ul><p><span class=\"ver\">[v1.0.43.08+]</span>: The A_ prefix may be omitted, which helps ease the transition to <a href=\"" + website + "commands/_NoEnv.htm\">#NoEnv</a>.</p>"));
        code.addCompletion(variableCompletion(code, "ProgramFiles", "", "<p>The Program Files directory (e.g. <code>C:\\Program Files</code> or <code>C:\\Program Files (x86)</code>). This is usually the same as the <em>ProgramFiles</em> <a href=\"" + website + "Concepts.htm#environment-variables\">environment variable</a>.</p><p>On <a href=\"" + website + "#Is64bitOS\">64-bit systems</a> (and not 32-bit systems), the following applies:</p><ul><li>If the executable (EXE) that is running the script is 32-bit, A_ProgramFiles returns the path of the \"Program Files (x86)\" directory.</li><li>For 32-bit processes, the <em>ProgramW6432</em> environment variable contains the path of the 64-bit Program Files directory. On Windows 7 and later, it is also set for 64-bit processes.</li><li>The <em>ProgramFiles(x86)</em> environment variable contains the path of the 32-bit Program Files directory.</li></ul><p><span class=\"ver\">[v1.0.43.08+]</span>: The A_ prefix may be omitted, which helps ease the transition to <a href=\"" + website + "commands/_NoEnv.htm\">#NoEnv</a>.</p>"));
        code.addCompletion(variableCompletion(code, "A_AppData", "", "<p>The full path and name of the folder containing the current user's application-specific data. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\AppData\\Roaming</pre>"));
        code.addCompletion(variableCompletion(code, "A_AppDataCommon", "", "<p>The full path and name of the folder containing the all-users application-specific data. For example:</p><pre class=\"NoIndent no-highlight\">C:\\ProgramData</pre>"));
        code.addCompletion(variableCompletion(code, "A_Desktop", "", "<p>The full path and name of the folder containing the current user's desktop files. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\Desktop</pre>"));
        code.addCompletion(variableCompletion(code, "A_DesktopCommon", "", "<p>The full path and name of the folder containing the all-users desktop files. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\Public\\Desktop</pre>"));
        code.addCompletion(variableCompletion(code, "A_StartMenu", "", "<p>The full path and name of the current user's Start Menu folder. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu</pre>"));
        code.addCompletion(variableCompletion(code, "A_StartMenuCommon", "", "<p>The full path and name of the all-users Start Menu folder. For example:</p><pre class=\"NoIndent no-highlight\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu</pre>"));
        code.addCompletion(variableCompletion(code, "A_Programs", "", "<p>The full path and name of the Programs folder in the current user's Start Menu. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs</pre>"));
        code.addCompletion(variableCompletion(code, "A_ProgramsCommon", "", "<p>The full path and name of the Programs folder in the all-users Start Menu. For example:</p><pre class=\"NoIndent no-highlight\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs</pre>"));
        code.addCompletion(variableCompletion(code, "A_Startup", "", "<p>The full path and name of the Startup folder in the current user's Start Menu. For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</pre>"));
        code.addCompletion(variableCompletion(code, "A_StartupCommon", "", "<p>The full path and name of the  Startup folder in the all-users Start Menu. For example:</p><pre class=\"NoIndent no-highlight\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</pre>"));
        code.addCompletion(variableCompletion(code, "A_MyDocuments", "", "<p>The full path and name of the current user's \"My Documents\" folder. Unlike most of the similar variables, if the folder is the root of a drive, the final backslash is not included (e.g. it would contain <code>M:</code> rather than <code>M:\\</code>). For example:</p><pre class=\"NoIndent no-highlight\">C:\\Users\\&lt;UserName&gt;\\Documents</pre>"));
        code.addCompletion(variableCompletion(code, "A_IsAdmin", "", "<p>If the current user has admin rights, this variable contains 1. Otherwise, it contains 0.</p><p id=\"RequireAdmin\">To have the script restart itself as admin (or show a prompt to the user requesting admin), use <a href=\"" + website + "commands/Run.htm#RunAs\">Run *RunAs</a>. However, note that running the script as admin causes all programs launched by the script to also run as admin. For a possible alternative, see <a href=\"" + website + "FAQ.htm#uac\">the FAQ</a>.</p>"));
        code.addCompletion(variableCompletion(code, "A_ScreenWidth", "", "<p>The width of the primary monitor, in pixels (e.g. 1024 and 768).</p><p>To discover the dimensions of other monitors in a multi-monitor system, use <a href=\"" + website + "commands/SysGet.htm\">SysGet</a>.</p><p>To instead discover the width and height of the entire desktop (even if it spans multiple monitors), use the following example:</p><br><pre><br><a href=\"" + website + "commands/SysGet.htm\">SysGet</a>, VirtualWidth, 78<br><a href=\"" + website + "commands/SysGet.htm\">SysGet</a>, VirtualHeight, 79<br></pre><p>In addition, use <a href=\"" + website + "commands/SysGet.htm\">SysGet</a> to discover the work area of a monitor, which can be smaller than the monitor's total area because the taskbar and other registered desktop toolbars are excluded.</p>"));
        code.addCompletion(variableCompletion(code, "A_ScreenHeight", "", "<p>The height of the primary monitor, in pixels (e.g. 1024 and 768).</p><p>To discover the dimensions of other monitors in a multi-monitor system, use <a href=\"" + website + "commands/SysGet.htm\">SysGet</a>.</p><p>To instead discover the width and height of the entire desktop (even if it spans multiple monitors), use the following example:</p><br><pre><br><a href=\"" + website + "commands/SysGet.htm\">SysGet</a>, VirtualWidth, 78<br><a href=\"" + website + "commands/SysGet.htm\">SysGet</a>, VirtualHeight, 79<br></pre><p>In addition, use <a href=\"" + website + "commands/SysGet.htm\">SysGet</a> to discover the work area of a monitor, which can be smaller than the monitor's total area because the taskbar and other registered desktop toolbars are excluded.</p>"));
        code.addCompletion(variableCompletion(code, "A_ScreenDPI", "", "Number of pixels per logical inch along the screen width. In a system with multiple display monitors, this value is the same for all monitors. On most systems this is 96; it depends on the system's text size (DPI) setting. See also <a href=\"" + website + "commands/Gui.htm#DPIScale\">Gui -DPIScale</a>."));
        code.addCompletion(variableCompletion(code, "A_IPAddress1", "", "The IP addresses of the 1st network adapters in the computer."));
        code.addCompletion(variableCompletion(code, "A_IPAddress2", "", "The IP addresses of the 2nd network adapters in the computer."));
        code.addCompletion(variableCompletion(code, "A_IPAddress3", "", "The IP addresses of the 3rd network adapters in the computer."));
        code.addCompletion(variableCompletion(code, "A_IPAddress4", "", "The IP addresses of the 4th network adapters in the computer."));
        code.addCompletion(variableCompletion(code, "A_Cursor", "", "<p>The type of mouse cursor currently being displayed. It will be one of the following words: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. The acronyms used with the size-type cursors are compass directions, e.g. NESW = NorthEast+SouthWest. The hand-shaped cursors (pointing and grabbing) are classified as Unknown.</p>"));
        code.addCompletion(variableCompletion(code, "A_CaretX", "", "<p>The current Y coordinate of the caret (text insertion point). The coordinates are relative to the active window unless <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a> is used to make them relative to the entire screen. If there is no active window or the caret position cannot be determined, this variable is blank.</p><p>The following script allows you to move the caret around to see its current position displayed in an auto-update tooltip. Note that some windows (e.g. certain versions of MS Word) report the same caret position regardless of its actual position.</p><br><pre><br>#Persistent<br>SetTimer, WatchCaret, 100<br>return<br>WatchCaret:ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20<br>return<br></pre>"));
        code.addCompletion(variableCompletion(code, "A_CaretY", "", "<p>The current X coordinate of the caret (text insertion point). The coordinates are relative to the active window unless <a href=\"" + website + "commands/CoordMode.htm\">CoordMode</a> is used to make them relative to the entire screen. If there is no active window or the caret position cannot be determined, this variable is blank.</p><p>The following script allows you to move the caret around to see its current position displayed in an auto-update tooltip. Note that some windows (e.g. certain versions of MS Word) report the same caret position regardless of its actual position.</p><br><pre><br>#Persistent<br>SetTimer, WatchCaret, 100<br>return<br>WatchCaret:ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20<br>return<br></pre>"));
        code.addCompletion(variableCompletion(code, "Clipboard", "", "Can be used to get or set the contents of the OS's clipboard. For details, see <a href=\"" + website + "misc/Clipboard.htm\">Clipboard</a>."));
        code.addCompletion(variableCompletion(code, "ClipboardAll", "", "The entire contents of the clipboard (such as formatting and text). For details, see <a href=\"" + website + "misc/Clipboard.htm#ClipboardAll\">ClipboardAll</a>."));
        code.addCompletion(variableCompletion(code, "ErrorLevel", "", "This variable is set by some commands to indicate their success or failure. For details, see <a href=\"" + website + "misc/ErrorLevel.htm\">ErrorLevel</a>."));
        code.addCompletion(variableCompletion(code, "A_LastError", "", "The result from the OS's GetLastError() function or the last COM object invocation. For details, see <a href=\"" + website + "commands/DllCall.htm#LastError\">DllCall()</a> and <a href=\"" + website + "commands/Run.htm#LastError\">Run/RunWait</a>."));
        // Loop Variables
        code.addCompletion(variableCompletion(code, "A_Index", "Integer", "This is the number of the current loop iteration (a 64-bit integer). For example, the first time the script executes the body of a loop, this variable will contain the number 1. For details see Loop or While-loop."));
        // File-Loop Variables
        code.addCompletion(variableCompletion(code, "A_LoopFileName", "", "The name of the file or folder currently retrieved (without the path)."));
        code.addCompletion(variableCompletion(code, "A_LoopFileExt", "", "The file's extension (e.g. TXT, DOC, or EXE). The period (.) is not included."));
        code.addCompletion(variableCompletion(code, "A_LoopFileFullPath", "", "<p>The path and name of the file/folder currently retrieved. If <em>FilePattern</em> contains a relative path rather than an absolute path, the path here will also be relative. In addition, any short (8.3) folder names in <em>FilePattern</em> will still be short (see next item to get the long version).</p><p>A_LoopFilePath is available in <span class=\"ver\">[v1.1.28+]</span> as an alias of A_LoopFileFullPath, which is a misnomer.</p>"));
        code.addCompletion(variableCompletion(code, "A_LoopFilePath", "", "<p>The path and name of the file/folder currently retrieved. If <em>FilePattern</em> contains a relative path rather than an absolute path, the path here will also be relative. In addition, any short (8.3) folder names in <em>FilePattern</em> will still be short (see next item to get the long version).</p><p>A_LoopFilePath is available in <span class=\"ver\">[v1.1.28+]</span> as an alias of A_LoopFileFullPath, which is a misnomer.</p>"));
        code.addCompletion(variableCompletion(code, "A_LoopFileLongPath", "", "<p>This is different than A_LoopFileFullPath in the following ways: 1) It always contains the absolute/complete path of the file even if <em>FilePattern</em> contains a relative path; 2) Any short (8.3) folder names in <em>FilePattern</em> itself are converted to their long names; 3) Characters in <em>FilePattern</em> are converted to uppercase or lowercase to match the case stored in the file system. This is useful for converting file names -- such as those passed into a script as command line parameters -- to their exact path names as shown by Explorer.</p>"));
        code.addCompletion(variableCompletion(code, "A_LoopFileShortPath", "", "<p>The 8.3 short path and name of the file/folder currently retrieved. For example: C:\\MYDOCU~1\\ADDRES~1.txt. If <em>FilePattern</em> contains a relative path rather than an absolute path, the path here will also be relative.</p><p>To retrieve the complete 8.3 path and name for a single file or folder, specify its name for <em>FilePattern</em> as in this example:</p><pre>Loop, C:\\My Documents\\Address List.txtShortPathName := A_LoopFileShortPath</pre><p class=\"note\"><strong>Note</strong>: This variable will be <strong>blank</strong> if the file does not have a short name, which can happen on systems where NtfsDisable8dot3NameCreation has been set in the registry. It will also be blank if <em>FilePattern</em> contains a relative path and the body of the loop uses <a href=\"" + website + "SetWorkingDir.htm\">SetWorkingDir</a> to switch away from the working directory in effect for the loop itself.</p>"));
        code.addCompletion(variableCompletion(code, "A_LoopFileShortName", "", "The 8.3 short name, or alternate name of the file. If the file doesn't have one (due to the long name being shorter than 8.3 or perhaps because short-name generation is disabled on an NTFS file system), <em>A_LoopFileName</em> will be retrieved instead."));
        code.addCompletion(variableCompletion(code, "A_LoopFileDir", "", "The path of the directory in which <em>A_LoopFileName</em> resides. If <em>FilePattern</em> contains a relative path rather than an absolute path, the path here will also be relative. A root directory will not contain a trailing backslash. For example: C:"));
        code.addCompletion(variableCompletion(code, "A_LoopFileTimeModified", "", "The time the file was last modified. Format <a href=\"" + website + "FileSetTime.htm\">YYYYMMDDHH24MISS</a>."));
        code.addCompletion(variableCompletion(code, "A_LoopFileTimeCreated", "", "The time the file was created. Format <a href=\"" + website + "FileSetTime.htm\">YYYYMMDDHH24MISS</a>."));
        code.addCompletion(variableCompletion(code, "A_LoopFileTimeAccessed", "", "The time the file was last accessed. Format <a href=\"" + website + "FileSetTime.htm\">YYYYMMDDHH24MISS</a>."));
        code.addCompletion(variableCompletion(code, "A_LoopFileAttrib", "", "The <a href=\"" + website + "FileGetAttrib.htm\">attributes</a> of the file currently retrieved."));
        code.addCompletion(variableCompletion(code, "A_LoopFileSize", "", "The size in bytes of the file currently retrieved. Files larger than 4 gigabytes are also supported."));
        code.addCompletion(variableCompletion(code, "A_LoopFileSizeKB", "", "The size in Kbytes of the file currently retrieved, rounded down to the nearest integer."));
        code.addCompletion(variableCompletion(code, "A_LoopFileSizeMB", "", "The size in Mbytes of the file currently retrieved, rounded down to the nearest integer."));
        // Registry Loop Variables
        code.addCompletion(variableCompletion(code, "A_LoopRegName", "", "Name of the currently retrieved item, which can be either a value name or the name of a subkey. Value names displayed by Windows RegEdit as \"(Default)\" will be retrieved if a value has been assigned to them, but A_LoopRegName will be blank for them."));
        code.addCompletion(variableCompletion(code, "A_LoopRegType", "", "The type of the currently retrieved item, which is one of the following words: KEY (i.e. the currently retrieved item is a subkey not a value), REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, REG_QWORD, REG_BINARY, REG_LINK, REG_RESOURCE_LIST, REG_FULL_RESOURCE_DESCRIPTOR, REG_RESOURCE_REQUIREMENTS_LIST, REG_DWORD_BIG_ENDIAN (probably rare on most Windows hardware). It will be empty if the currently retrieved item is of an unknown type."));
        code.addCompletion(variableCompletion(code, "A_LoopRegKey", "", "The name of the root key being accessed (HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG). For remote registry access, this value will <strong>not</strong> include the computer name."));
        code.addCompletion(variableCompletion(code, "A_LoopRegSubKey", "", "Name of the current subkey. This will be the same as the <em>Key</em> parameter unless the <em>Recurse</em> parameter is being used to recursively explore other subkeys. In that case, it will be the full path of the currently retrieved item, not including the root key. For example: Software\\SomeApplication\\My SubKey"));
        code.addCompletion(variableCompletion(code, "A_LoopRegTimeModified", "", "The time the current subkey or any of its values was last modified. Format <a href=\"" + website + "FileSetTime.htm\">YYYYMMDDHH24MISS</a>. This variable will be empty if the currently retrieved item is not a subkey (i.e. <em>A_LoopRegType</em> is not the word KEY)."));
        // File Reading Loop Variables
        code.addCompletion(variableCompletion(code, "A_LoopReadLine", "", "The built-in variable A_LoopReadLine exists within any file-reading loop. It contains the contents of the current line excluding the carriage return and linefeed (`r`n) that marks the end of the line. If an inner file-reading loop is enclosed by an outer file-reading loop, the innermost loop's file-line will take precedence."));
        // Parsing Loop Variables
        code.addCompletion(variableCompletion(code, "A_LoopField", "", "The built-in variable A_LoopField exists within any parsing loop. It contains the contents of the current substring (field) from InputVar. If an inner parsing loop is enclosed by an outer parsing loop, the innermost loop's field will take precedence."));
        // Functions
        website = baseWebsite + "commands/";
        code.addCompletion(variableCompletion(code, "Abs", "", "Returns the absolute value of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Abs\">Abs</a></p>"));
        code.addCompletion(variableCompletion(code, "Asc", "", "Returns the numeric value of the first byte or UTF-16 code unit in the specified string.<br><p>See <a href=\"" + website + "Asc.htm\">Asc</a></p>"));
        code.addCompletion(variableCompletion(code, "ASin", "", "Returns the arcsine (the number whose sine is <em>Number</em>) in radians.<br><p>See <a href=\"" + website + "Math.htm#ASin\">ASin</a></p>"));
        code.addCompletion(variableCompletion(code, "ACos", "", "Returns the arccosine (the number whose cosine is <em>Number</em>) in radians.<br><p>See <a href=\"" + website + "Math.htm#ACos\">ACos</a></p>"));
        code.addCompletion(variableCompletion(code, "ATan", "", "Returns the arctangent (the number whose tangent is <em>Number</em>) in radians.<br><p>See <a href=\"" + website + "Math.htm#ATan\">ATan</a></p>"));
        code.addCompletion(variableCompletion(code, "Ceil", "", "Returns <em>Number</em> rounded up to the nearest integer (without any .00 suffix).<br><p>See <a href=\"" + website + "Math.htm#Ceil\">Ceil</a></p>"));
        code.addCompletion(variableCompletion(code, "Chr", "", "Returns the string (usually a single character) corresponding to the character code indicated by the specified number.<br><p>See <a href=\"" + website + "Chr.htm\">Chr</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjActive", "", "Retrieves a registered COM object.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObjActive</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjArray", "", "Creates a SafeArray for use with COM.<br><p>See <a href=\"" + website + "ComObjArray.htm\">ComObjArray</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjConnect", "", "Connects a COM object's event sources to functions with a given prefix.<br><p>See <a href=\"" + website + "ComObjConnect.htm\">ComObjConnect</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjCreate", "", "Creates a COM object.<br><p>See <a href=\"" + website + "ComObjCreate.htm\">ComObjCreate</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObject", "", "Creates an object representing a typed value to be passed as a parameter or return value.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObject</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjEnwrap", "", "Wraps a COM object.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObjEnwrap() / ComObjUnwrap()</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjUnwrap", "", "Unwraps a COM object.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObjEnwrap() / ComObjUnwrap()</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjError", "", "Enables or disables notification of COM errors.<br><p>See <a href=\"" + website + "ComObjError.htm\">ComObjError</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjFlags", "", "Retrieves or changes flags which control a COM wrapper object's behaviour.<br><p>See <a href=\"" + website + "ComObjFlags.htm\">ComObjFlags</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjGet", "", "Returns a reference to an object provided by a COM component.<br><p>See <a href=\"" + website + "ComObjGet.htm\">ComObjGet</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjMissing", "", "Creates a \"missing parameter\" object to pass to a COM method.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObjMissing</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjParameter", "", "Wraps a value and type to pass as a parameter to a COM method.<br><p>See <a href=\"" + website + "ComObjActive.htm\">ComObjParameter</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjQuery", "", "Queries a COM object for an interface or service.<br><p>See <a href=\"" + website + "ComObjQuery.htm\">ComObjQuery</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjType", "", "Retrieves type information from a COM object.<br><p>See <a href=\"" + website + "ComObjType.htm\">ComObjType</a></p>"));
        code.addCompletion(variableCompletion(code, "ComObjValue", "", "Retrieves the value or pointer stored in a COM wrapper object.<br><p>See <a href=\"" + website + "ComObjValue.htm\">ComObjValue</a></p>"));
        code.addCompletion(variableCompletion(code, "Cos", "", "Returns the trigonometric cosine of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Cos\">Cos</a></p>"));
        code.addCompletion(variableCompletion(code, "DllCall", "", "Calls a function inside a DLL, such as a standard Windows API function.<br><p>See <a href=\"" + website + "DllCall.htm\">DllCall</a></p>"));
        code.addCompletion(variableCompletion(code, "Exception", "", "Creates an object with properties, also common to exceptions created by <a href=\"" + website + "Catch.htm#RuntimeErrors\">runtime errors</a>.<br><p>See <a href=\"" + website + "Throw.htm#Exception\">Exception</a></p>"));
        code.addCompletion(variableCompletion(code, "Exp", "", "Returns <em>e</em> (which is approximately 2.71828182845905) raised to the <em>N</em>th power.<br><p>See <a href=\"" + website + "Math.htm#Exp\">Exp</a></p>"));
        code.addCompletion(variableCompletion(code, "FileExist", "", "Checks for the existence of a file or folder and returns its attributes.<br><p>See <a href=\"" + website + "FileExist.htm\">FileExist</a></p>"));
        code.addCompletion(variableCompletion(code, "FileOpen", "", "Opens a file to read specific content from it and/or to write new content into it.<br><p>See <a href=\"" + website + "FileOpen.htm\">FileOpen</a></p>"));
        code.addCompletion(variableCompletion(code, "Floor", "", "Returns <em>Number</em> rounded down to the nearest integer (without any .00 suffix).<br><p>See <a href=\"" + website + "Math.htm#Floor\">Floor</a></p>"));
        code.addCompletion(variableCompletion(code, "Format", "", "Formats a variable number of input values according to a format string.<br><p>See <a href=\"" + website + "Format.htm\">Format</a></p>"));
        code.addCompletion(variableCompletion(code, "Func", "", "Retrieves a <a href=\"" + website + "../Objects.htm#Function_References\">reference</a> to a function.<br><p>See <a href=\"" + website + "Func.htm\">Func</a></p>"));
        code.addCompletion(variableCompletion(code, "GetKeyName", "", "Retrieves the name or text of a key.<br><p>See <a href=\"" + website + "GetKey.htm\">GetKeyName</a></p>"));
        code.addCompletion(variableCompletion(code, "GetKeyVK", "", "Retrieves the virtual key code of a key.<br><p>See <a href=\"" + website + "GetKey.htm\">GetKeyVK</a></p>"));
        code.addCompletion(variableCompletion(code, "GetKeySC", "", "Retrieves the scan code of a key.<br><p>See <a href=\"" + website + "GetKey.htm\">GetKeySC</a></p>"));
        code.addCompletion(variableCompletion(code, "GetKeyState", "", "Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.<br><p>See <a href=\"" + website + "GetKeyState.htm#function\">GetKeyState</a></p>"));
        code.addCompletion(variableCompletion(code, "Hotstring", "", "Creates, modifies, enables, or disables a hotstring while the script is running.<br><p>See <a href=\"" + website + "Hotstring.htm\">Hotstring</a></p>"));
        code.addCompletion(variableCompletion(code, "IL_Create", "", "The means by which icons are added to a <a href=\"" + website + "ListView.htm\">ListView</a> or <a href=\"" + website + "TreeView.htm\">TreeView</a> control.<br><p>See <a href=\"" + website + "ListView.htm#IL_Create\">IL_Create</a></p>"));
        code.addCompletion(variableCompletion(code, "IL_Add", "", "The means by which icons are added to a <a href=\"" + website + "ListView.htm\">ListView</a> or <a href=\"" + website + "TreeView.htm\">TreeView</a> control.<br><p>See <a href=\"" + website + "ListView.htm#IL_Add\">IL_Add</a></p>"));
        code.addCompletion(variableCompletion(code, "IL_Destroy", "", "The means by which icons are added to a <a href=\"" + website + "ListView.htm\">ListView</a> or <a href=\"" + website + "TreeView.htm\">TreeView</a> control.<br><p>See <a href=\"" + website + "ListView.htm#IL_Destroy\">IL_Destroy</a></p>"));
        code.addCompletion(variableCompletion(code, "InputHook", "", "Creates an object which can be used to collect or intercept keyboard input.<br><p>See <a href=\"" + website + "InputHook.htm\">InputHook</a></p>"));
        code.addCompletion(variableCompletion(code, "InStr", "", "Searches for a given <em>occurrence</em> of a string, from the left or the right.<br><p>See <a href=\"" + website + "InStr.htm\">InStr</a></p>"));
        code.addCompletion(variableCompletion(code, "IsByRef", "", "Returns a non-zero number if the specified <a href=\"" + website + "../Functions.htm#ByRef\">ByRef parameter</a> was supplied with a variable.<br><p>See <a href=\"" + website + "IsByRef.htm\">IsByRef</a></p>"));
        code.addCompletion(variableCompletion(code, "IsFunc", "", "Returns a non-zero number if the specified function exists in the script.<br><p>See <a href=\"" + website + "IsFunc.htm\">IsFunc</a></p>"));
        code.addCompletion(variableCompletion(code, "IsLabel", "", "Returns a non-zero number if the specified label exists in the script.<br><p>See <a href=\"" + website + "IsLabel.htm\">IsLabel</a></p>"));
        code.addCompletion(variableCompletion(code, "IsObject", "", "Returns a non-zero number if the specified value is an object.<br><p>See <a href=\"" + website + "IsObject.htm\">IsObject</a></p>"));
        code.addCompletion(variableCompletion(code, "LoadPicture", "", "Loads a picture from file and returns a bitmap or icon handle.<br><p>See <a href=\"" + website + "LoadPicture.htm\">LoadPicture</a></p>"));
        code.addCompletion(variableCompletion(code, "Log", "", "Returns the logarithm (base 10) of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Log\">Log</a></p>"));
        code.addCompletion(variableCompletion(code, "Ln", "", "Returns the natural logarithm (base e) of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Ln\">Ln</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_Add", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_Add\">LV_Add</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_Delete", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_Delete\">LV_Delete</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_DeleteCol", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_DeleteCol\">LV_DeleteCol</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_GetCount", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_GetCount\">LV_GetCount</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_GetNext", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_GetNext\">LV_GetNext</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_GetText", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_GetText\">LV_GetText</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_Insert", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_Insert\">LV_Insert</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_InsertCol", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_InsertCol\">LV_InsertCol</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_Modify", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_Modify\">LV_Modify</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_ModifyCol", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_ModifyCol\">LV_ModifyCol</a></p>"));
        code.addCompletion(variableCompletion(code, "LV_SetImageList", "", "The means by which the rows and columns of a <a href=\"" + website + "ListView.htm\">ListView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "ListView.htm#LV_SetImageList\">LV_SetImageList</a></p>"));
        code.addCompletion(variableCompletion(code, "Max", "", "Returns the highest value of one or more numbers.<br><p>See <a href=\"" + website + "Math.htm#Max\">Max</a></p>"));
        code.addCompletion(variableCompletion(code, "MenuGetHandle", "", "Retrieves the <a href=\"" + website + "Menu.htm#Win32_Menus\">Win32 menu</a> handle of a menu.<br><p>See <a href=\"" + website + "MenuGetHandle.htm\">MenuGetHandle</a></p>"));
        code.addCompletion(variableCompletion(code, "MenuGetName", "", "Retrieves the name of a menu given a handle to its underlying <a href=\"" + website + "Menu.htm#Win32_Menus\">Win32 menu</a>.<br><p>See <a href=\"" + website + "MenuGetName.htm\">MenuGetName</a></p>"));
        code.addCompletion(variableCompletion(code, "Min", "", "Returns the lowest value of one or more numbers.<br><p>See <a href=\"" + website + "Math.htm#Min\">Min</a></p>"));
        code.addCompletion(variableCompletion(code, "Mod", "", "Modulo. Returns the remainder when <em>Dividend</em> is divided by <em>Divisor</em>.<br><p>See <a href=\"" + website + "Math.htm#Mod\">Mod</a></p>"));
        code.addCompletion(variableCompletion(code, "NumGet", "", "Returns the binary number stored at the specified address+offset.<br><p>See <a href=\"" + website + "NumGet.htm\">NumGet</a></p>"));
        code.addCompletion(variableCompletion(code, "NumPut", "", "Stores a number in binary format at the specified address+offset.<br><p>See <a href=\"" + website + "NumPut.htm\">NumPut</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjAddRef", "", "Increments an object's <a href=\"" + website + "../Objects.htm#Reference_Counting\">reference count</a>.<br><p>See <a href=\"" + website + "ObjAddRef.htm\">ObjAddRef / ObjRelease</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjRelease", "", "Decrements an object's <a href=\"" + website + "../Objects.htm#Reference_Counting\">reference count</a>.<br><p>See <a href=\"" + website + "ObjAddRef.htm\">ObjAddRef / ObjRelease</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjBindMethod", "", "Creates a <a href=\"" + website + "../objects/Functor.htm#BoundFunc\">BoundFunc object</a> which calls a method of a given object.<br><p>See <a href=\"" + website + "ObjBindMethod.htm\">ObjBindMethod</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjGetBase", "", "Retrieves an object's <a href=\"" + website + "../Objects.htm#Custom_Objects\">base object</a>.<br><p>See <a href=\"" + website + "../objects/Object.htm#GetBase\">ObjGetBase</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjRawGet", "", "Retrieves a key-value pair from an object, bypassing the object's <a href=\"" + website + "../Objects.htm#Meta_Functions\">meta-functions</a>.<br><p>See <a href=\"" + website + "../objects/Object.htm#RawGet\">ObjRawGet</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjRawSet", "", "Stores or overwrites a key-value pair in an object, bypassing the object's <a href=\"" + website + "../Objects.htm#Meta_Functions\">meta-functions</a>.<br><p>See <a href=\"" + website + "../objects/Object.htm#RawSet\">ObjRawSet</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjSetBase", "", "Sets an object's <a href=\"" + website + "../Objects.htm#Custom_Objects\">base object</a>.<br><p>See <a href=\"" + website + "../objects/Object.htm#SetBase\">ObjSetBase</a></p>"));
        code.addCompletion(variableCompletion(code, "OnClipboardChange", "", "Registers a <a href=\"" + website + "../Functions.htm\">function</a> or <a href=\"" + website + "../objects/Functor.htm\">function object</a> to run whenever the clipboard's content changes.<br><p>See <a href=\"" + website + "OnClipboardChange.htm#function\">OnClipboardChange</a></p>"));
        code.addCompletion(variableCompletion(code, "OnError", "", "Specifies a <a href=\"" + website + "../Functions.htm\">function</a> to run automatically when an unhandled error occurs.<br><p>See <a href=\"" + website + "OnError.htm\">OnError</a></p>"));
        code.addCompletion(variableCompletion(code, "OnExit", "", "Specifies a <a href=\"" + website + "../Functions.htm\">callback function</a> to run automatically when the script exits.<br><p>See <a href=\"" + website + "OnExit.htm#function\">OnExit</a></p>"));
        code.addCompletion(variableCompletion(code, "OnMessage", "", "Specifies a <a href=\"" + website + "../Functions.htm\">function</a> or <a href=\"" + website + "../objects/Functor.htm\">function object</a> to call automatically when the script receives the specified message.<br><p>See <a href=\"" + website + "OnMessage.htm\">OnMessage</a></p>"));
        code.addCompletion(variableCompletion(code, "Ord", "", "Returns the ordinal value (numeric character code) of the first character in the specified string.<br><p>See <a href=\"" + website + "Ord.htm\">Ord</a></p>"));
        code.addCompletion(variableCompletion(code, "RegExMatch", "", "Determines whether a string contains a pattern (regular expression).<br><p>See <a href=\"" + website + "RegExMatch.htm\">RegExMatch</a></p>"));
        code.addCompletion(variableCompletion(code, "RegExReplace", "", "Replaces occurrences of a pattern (regular expression) inside a string.<br><p>See <a href=\"" + website + "RegExReplace.htm\">RegExReplace</a></p>"));
        code.addCompletion(variableCompletion(code, "RegisterCallback", "", "Creates a machine-code address that when called, redirects the call to a <a href=\"" + website + "../Functions.htm\">function</a> in the script.<br><p>See <a href=\"" + website + "RegisterCallback.htm\">RegisterCallback</a></p>"));
        code.addCompletion(variableCompletion(code, "Round", "", "Returns <em>Number</em> rounded to <em>N</em> decimal places.<br><p>See <a href=\"" + website + "Math.htm#Round\">Round</a></p>"));
        code.addCompletion(variableCompletion(code, "SB_SetIcon", "", "The means by which the bar of a <a href=\"" + website + "GuiControls.htm#StatusBar\">StatusBar</a> control is modified.<br><p>See <a href=\"" + website + "GuiControls.htm#SB_SetIcon\">SB_SetIcon</a></p>"));
        code.addCompletion(variableCompletion(code, "SB_SetParts", "", "The means by which the bar of a <a href=\"" + website + "GuiControls.htm#StatusBar\">StatusBar</a> control is modified.<br><p>See <a href=\"" + website + "GuiControls.htm#SB_SetParts\">SB_SetParts</a></p>"));
        code.addCompletion(variableCompletion(code, "SB_SetText", "", "The means by which the bar of a <a href=\"" + website + "GuiControls.htm#StatusBar\">StatusBar</a> control is modified.<br><p>See <a href=\"" + website + "GuiControls.htm#SB_SetText\">SB_SetText</a></p>"));
        code.addCompletion(variableCompletion(code, "Sin", "", "Returns the trigonometric sine of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Sin\">Sin</a></p>"));
        code.addCompletion(variableCompletion(code, "Sqrt", "", "Returns the square root of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Sqrt\">Sqrt</a></p>"));
        code.addCompletion(variableCompletion(code, "StrGet", "", "Copies a string from a memory address, optionally converting it from a given code page.<br><p>See <a href=\"" + website + "StrGet.htm\">StrGet</a></p>"));
        code.addCompletion(variableCompletion(code, "StrLen", "", "Retrieves the count of how many characters are in a string.<br><p>See <a href=\"" + website + "StrLen.htm\">StrLen</a></p>"));
        code.addCompletion(variableCompletion(code, "StrPut", "", "Copies a string to a memory address, optionally converting it to a given code page.<br><p>See <a href=\"" + website + "StrPut.htm\">StrPut</a></p>"));
        code.addCompletion(variableCompletion(code, "StrReplace", "", "Replaces the specified substring with a new string.<br><p>See <a href=\"" + website + "StrReplace.htm\">StrReplace</a></p>"));
        code.addCompletion(variableCompletion(code, "StrSplit", "", "Separates a string into an array of substrings using the specified delimiters.<br><p>See <a href=\"" + website + "StrSplit.htm\">StrSplit</a></p>"));
        code.addCompletion(variableCompletion(code, "SubStr", "", "Retrieves one or more characters from the specified position in a string.<br><p>See <a href=\"" + website + "SubStr.htm\">SubStr</a></p>"));
        code.addCompletion(variableCompletion(code, "Tan", "", "Returns the trigonometric tangent of <em>Number</em>.<br><p>See <a href=\"" + website + "Math.htm#Tan\">Tan</a></p>"));
        code.addCompletion(variableCompletion(code, "Trim", "", "Trims characters from the beginning and end of a string.<br><p>See <a href=\"" + website + "Trim.htm\">Trim() / LTrim() / RTrim()</a></p>"));
        code.addCompletion(variableCompletion(code, "LTrim", "", "Trims characters from the beginning of a string.<br><p>See <a href=\"" + website + "Trim.htm\">Trim() / LTrim() / RTrim()</a></p>"));
        code.addCompletion(variableCompletion(code, "RTrim", "", "Trims characters from the end of a string.<br><p>See <a href=\"" + website + "Trim.htm\">Trim() / LTrim() / RTrim()</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_Add", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_Add\">TV_Add</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_Delete", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_Delete\">TV_Delete</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_Get", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_Get\">TV_Get</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetChild", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetChild\">TV_GetChild</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetCount", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetCount\">TV_GetCount</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetNext", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetNext\">TV_GetNext</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetParent", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetParent\">TV_GetParent</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetPrev", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetPrev\">TV_GetPrev</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetSelection", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetSelection\">TV_GetSelection</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_GetText", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_GetText\">TV_GetText</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_Modify", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_Modify\">TV_Modify</a></p>"));
        code.addCompletion(variableCompletion(code, "TV_SetImageList", "", "The means by which the items of a <a href=\"" + website + "TreeView.htm\">TreeView</a> control are added, modified or retrieved.<br><p>See <a href=\"" + website + "TreeView.htm#TV_SetImageList\">TV_SetImageList</a></p>"));
        code.addCompletion(variableCompletion(code, "VarSetCapacity", "", "Enlarges a variable's holding capacity or frees its memory. Normally, this is necessary only for unusual circumstances such as <a href=\"" + website + "DllCall.htm\">DllCall()</a>.<br><p>See <a href=\"" + website + "VarSetCapacity.htm\">VarSetCapacity</a></p>"));
        code.addCompletion(variableCompletion(code, "WinActive", "", "Checks if the specified window is active and returns its unique ID (HWND).<br><p>See <a href=\"" + website + "WinActive.htm\">WinActive</a></p>"));
        code.addCompletion(variableCompletion(code, "WinExist", "", "Checks if the specified window exists and returns the unique ID (HWND) of the first matching window.<br><p>See <a href=\"" + website + "WinExist.htm\">WinExist</a></p>"));
        // Commands
        code.addCompletion(variableCompletion(code, "AutoTrim", "", "Determines whether <a href=\"" + website + "SetEnv.htm\">traditional assignments</a> like <code>Var1 = %Var2%</code> omit spaces and tabs from the beginning and end of Var2.<br><p>See <a href=\"" + website + "AutoTrim.htm\">AutoTrim</a></p>"));
        code.addCompletion(variableCompletion(code, "BlockInput", "", "Disables or enables the user's ability to interact with the computer via keyboard and mouse.<br><p>See <a href=\"" + website + "BlockInput.htm\">BlockInput</a></p>"));
        code.addCompletion(variableCompletion(code, "Click", "", "Clicks a mouse button at the specified coordinates. It can also hold down a mouse button, turn the mouse wheel, or move the mouse.<br><p>See <a href=\"" + website + "Click.htm\">Click</a></p>"));
        code.addCompletion(variableCompletion(code, "ClipWait", "", "Waits until the <a href=\"" + website + "../misc/Clipboard.htm\">clipboard</a> contains data.<br><p>See <a href=\"" + website + "ClipWait.htm\">ClipWait</a></p>"));
        code.addCompletion(variableCompletion(code, "Control", "", "Makes a variety of changes to a control.<br><p>See <a href=\"" + website + "Control.htm\">Control</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlClick", "", "Sends a mouse button or mouse wheel event to a control.<br><p>See <a href=\"" + website + "ControlClick.htm\">ControlClick</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlFocus", "", "Sets input focus to a given control on a window.<br><p>See <a href=\"" + website + "ControlFocus.htm\">ControlFocus</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlGet", "", "Retrieves various types of information about a control.<br><p>See <a href=\"" + website + "ControlGet.htm\">ControlGet</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlGetFocus", "", "Retrieves which control of the target window has input focus, if any.<br><p>See <a href=\"" + website + "ControlGetFocus.htm\">ControlGetFocus</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlGetPos", "", "Retrieves the position and size of a control.<br><p>See <a href=\"" + website + "ControlGetPos.htm\">ControlGetPos</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlGetText", "", "Retrieves text from a control.<br><p>See <a href=\"" + website + "ControlGetText.htm\">ControlGetText</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlMove", "", "Moves or resizes a control.<br><p>See <a href=\"" + website + "ControlMove.htm\">ControlMove</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlSend", "", "Sends simulated keystrokes to a window or control.<br><p>See <a href=\"" + website + "ControlSend.htm\">ControlSend / ControlSendRaw</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlSendRaw", "", "Sends simulated keystrokes to a window or control.<br><p>See <a href=\"" + website + "ControlSend.htm\">ControlSend / ControlSendRaw</a></p>"));
        code.addCompletion(variableCompletion(code, "ControlSetText", "", "Changes the text of a control.<br><p>See <a href=\"" + website + "ControlSetText.htm\">ControlSetText</a></p>"));
        code.addCompletion(variableCompletion(code, "CoordMode", "", "Sets coordinate mode for various commands to be relative to either the active window or the screen.<br><p>See <a href=\"" + website + "CoordMode.htm\">CoordMode</a></p>"));
        code.addCompletion(variableCompletion(code, "Critical", "", "Prevents the <a href=\"" + website + "../misc/Threads.htm\">current thread</a> from being interrupted by other threads, or enables it to be interrupted.<br><p>See <a href=\"" + website + "Critical.htm\">Critical</a></p>"));
        code.addCompletion(variableCompletion(code, "DetectHiddenText", "", "Determines whether invisible text in a window is \"seen\" for the purpose of finding the window. This affects commands, built-in functions and control flow statements such as WinExist() and WinActivate.<br><p>See <a href=\"" + website + "DetectHiddenText.htm\">DetectHiddenText</a></p>"));
        code.addCompletion(variableCompletion(code, "DetectHiddenWindows", "", "Determines whether invisible windows are \"seen\" by the script.<br><p>See <a href=\"" + website + "DetectHiddenWindows.htm\">DetectHiddenWindows</a></p>"));
        code.addCompletion(variableCompletion(code, "Drive", "", "Ejects/retracts the tray in a CD or DVD drive, or sets a drive's volume label.<br><p>See <a href=\"" + website + "Drive.htm\">Drive</a></p>"));
        code.addCompletion(variableCompletion(code, "DriveGet", "", "Retrieves various types of information about the computer's drive(s).<br><p>See <a href=\"" + website + "DriveGet.htm\">DriveGet</a></p>"));
        code.addCompletion(variableCompletion(code, "DriveSpaceFree", "", "Retrieves the free disk space of a drive, in Megabytes.<br><p>See <a href=\"" + website + "DriveSpaceFree.htm\">DriveSpaceFree</a></p>"));
        code.addCompletion(variableCompletion(code, "Edit", "", "Opens the current script for editing in the associated editor.<br><p>See <a href=\"" + website + "Edit.htm\">Edit</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvAdd", "", "Sets a <a href=\"" + website + "../Variables.htm\">variable</a> to the sum of itself plus the given value (can also add or subtract time from a <a href=\"" + website + "FileSetTime.htm#YYYYMMDD\">date-time</a> value). Synonymous with: <code>Var += Value</code>.<br><p>See <a href=\"" + website + "EnvAdd.htm\">EnvAdd</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvDiv", "", "Sets a <a href=\"" + website + "../Variables.htm\">variable</a> to itself divided by the given value. Synonymous with: <code>Var /= Value</code>.<br><p>See <a href=\"" + website + "EnvDiv.htm\">EnvDiv</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvGet", "", "Retrieves an environment variable.<br><p>See <a href=\"" + website + "EnvGet.htm\">EnvGet</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvMult", "", "Sets a <a href=\"" + website + "../Variables.htm\">variable</a> to itself times the given value. Synonymous with: <code>Var *= Value</code>.<br><p>See <a href=\"" + website + "EnvMult.htm\">EnvMult</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvSet", "", "Writes a value to a <a href=\"" + website + "../Variables.htm\">variable</a> contained in the environment.<br><p>See <a href=\"" + website + "EnvSet.htm\">EnvSet</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvSub", "", "Sets a <a href=\"" + website + "../Variables.htm\">variable</a> to itself minus the given value (can also compare <a href=\"" + website + "FileSetTime.htm#YYYYMMDD\">date-time</a> values). Synonymous with: <code>Var -= Value</code>.<br><p>See <a href=\"" + website + "EnvSub.htm\">EnvSub</a></p>"));
        code.addCompletion(variableCompletion(code, "EnvUpdate", "", "Notifies the OS and all running applications that <a href=\"" + website + "../Variables.htm\">environment variable(s)</a> have changed.<br><p>See <a href=\"" + website + "EnvUpdate.htm\">EnvUpdate</a></p>"));
        code.addCompletion(variableCompletion(code, "Exit", "", "Exits the <a href=\"" + website + "../misc/Threads.htm\">current thread</a> or (if the script is not <a href=\"" + website + "_Persistent.htm\">persistent</a>) the entire script.<br><p>See <a href=\"" + website + "Exit.htm\">Exit</a></p>"));
        code.addCompletion(variableCompletion(code, "ExitApp", "", "Terminates the script.<br><p>See <a href=\"" + website + "ExitApp.htm\">ExitApp</a></p>"));
        code.addCompletion(variableCompletion(code, "FileAppend", "", "Writes text to the end of a file (first creating the file, if necessary).<br><p>See <a href=\"" + website + "FileAppend.htm\">FileAppend</a></p>"));
        code.addCompletion(variableCompletion(code, "FileCopy", "", "Copies one or more files.<br><p>See <a href=\"" + website + "FileCopy.htm\">FileCopy</a></p>"));
        code.addCompletion(variableCompletion(code, "FileCopyDir", "", "Copies a folder along with all its sub-folders and files (similar to xcopy).<br><p>See <a href=\"" + website + "FileCopyDir.htm\">FileCopyDir</a></p>"));
        code.addCompletion(variableCompletion(code, "FileCreateDir", "", "Creates a folder.<br><p>See <a href=\"" + website + "FileCreateDir.htm\">FileCreateDir</a></p>"));
        code.addCompletion(variableCompletion(code, "FileCreateShortcut", "", "Creates a shortcut (.lnk) file.<br><p>See <a href=\"" + website + "FileCreateShortcut.htm\">FileCreateShortcut</a></p>"));
        code.addCompletion(variableCompletion(code, "FileDelete", "", "Deletes one or more files.<br><p>See <a href=\"" + website + "FileDelete.htm\">FileDelete</a></p>"));
        code.addCompletion(variableCompletion(code, "FileEncoding", "", "Sets the default encoding for <a href=\"" + website + "FileRead.htm\">FileRead</a>, <a href=\"" + website + "FileReadLine.htm\">FileReadLine</a>, <a href=\"" + website + "LoopReadFile.htm\">Loop Read</a>, <a href=\"" + website + "FileAppend.htm\">FileAppend</a>, and <a href=\"" + website + "FileOpen.htm\">FileOpen()</a>.<br><p>See <a href=\"" + website + "FileEncoding.htm\">FileEncoding</a></p>"));
        code.addCompletion(variableCompletion(code, "FileInstall", "", "Includes the specified file inside the <a href=\"" + website + "../Scripts.htm#ahk2exe\">compiled version</a> of the script.<br><p>See <a href=\"" + website + "FileInstall.htm\">FileInstall</a></p>"));
        code.addCompletion(variableCompletion(code, "FileGetAttrib", "", "Reports whether a file or folder is read-only, hidden, etc.<br><p>See <a href=\"" + website + "FileGetAttrib.htm\">FileGetAttrib</a></p>"));
        code.addCompletion(variableCompletion(code, "FileGetShortcut", "", "Retrieves information about a shortcut (.lnk) file, such as its target file.<br><p>See <a href=\"" + website + "FileGetShortcut.htm\">FileGetShortcut</a></p>"));
        code.addCompletion(variableCompletion(code, "FileGetSize", "", "Retrieves the size of a file.<br><p>See <a href=\"" + website + "FileGetSize.htm\">FileGetSize</a></p>"));
        code.addCompletion(variableCompletion(code, "FileGetTime", "", "Retrieves the datetime stamp of a file or folder.<br><p>See <a href=\"" + website + "FileGetTime.htm\">FileGetTime</a></p>"));
        code.addCompletion(variableCompletion(code, "FileGetVersion", "", "Retrieves the version of a file.<br><p>See <a href=\"" + website + "FileGetVersion.htm\">FileGetVersion</a></p>"));
        code.addCompletion(variableCompletion(code, "FileMove", "", "Moves or renames one or more files.<br><p>See <a href=\"" + website + "FileMove.htm\">FileMove</a></p>"));
        code.addCompletion(variableCompletion(code, "FileMoveDir", "", "Moves a folder along with all its sub-folders and files. It can also rename a folder.<br><p>See <a href=\"" + website + "FileMoveDir.htm\">FileMoveDir</a></p>"));
        code.addCompletion(variableCompletion(code, "FileRead", "", "Reads a file's contents into a <a href=\"" + website + "../Variables.htm\">variable</a>.<br><p>See <a href=\"" + website + "FileRead.htm\">FileRead</a></p>"));
        code.addCompletion(variableCompletion(code, "FileReadLine", "", "Reads the specified line from a file and stores the text in a <a href=\"" + website + "../Variables.htm\">variable</a>.<br><p>See <a href=\"" + website + "FileReadLine.htm\">FileReadLine</a></p>"));
        code.addCompletion(variableCompletion(code, "FileRecycle", "", "Sends a file or directory to the recycle bin if possible, or permanently deletes it.<br><p>See <a href=\"" + website + "FileRecycle.htm\">FileRecycle</a></p>"));
        code.addCompletion(variableCompletion(code, "FileRecycleEmpty", "", "Empties the recycle bin.<br><p>See <a href=\"" + website + "FileRecycleEmpty.htm\">FileRecycleEmpty</a></p>"));
        code.addCompletion(variableCompletion(code, "FileRemoveDir", "", "Deletes a folder.<br><p>See <a href=\"" + website + "FileRemoveDir.htm\">FileRemoveDir</a></p>"));
        code.addCompletion(variableCompletion(code, "FileSelectFile", "", "Displays a standard dialog that allows the user to open or save file(s).<br><p>See <a href=\"" + website + "FileSelectFile.htm\">FileSelectFile</a></p>"));
        code.addCompletion(variableCompletion(code, "FileSelectFolder", "", "<p>Displays a standard dialog that allows the user to select a folder.</p><br><p>See <a href=\"" + website + "FileSelectFolder.htm\">FileSelectFolder</a></p>"));
        code.addCompletion(variableCompletion(code, "FileSetAttrib", "", "Changes the attributes of one or more files or folders. Wildcards are supported.<br><p>See <a href=\"" + website + "FileSetAttrib.htm\">FileSetAttrib</a></p>"));
        code.addCompletion(variableCompletion(code, "FileSetTime", "", "Changes the datetime stamp of one or more files or folders. Wildcards are supported.<br><p>See <a href=\"" + website + "FileSetTime.htm\">FileSetTime</a></p>"));
        code.addCompletion(variableCompletion(code, "FormatTime", "", "Transforms a <a href=\"" + website + "FileSetTime.htm#YYYYMMDD\">YYYYMMDDHH24MISS</a> timestamp into the specified date/time format.<br><p>See <a href=\"" + website + "FormatTime.htm\">FormatTime</a></p>"));
        code.addCompletion(variableCompletion(code, "GetKeyState", "", "Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.<br><p>See <a href=\"" + website + "GetKeyState.htm#command\">GetKeyState</a></p>"));
        code.addCompletion(variableCompletion(code, "GroupActivate", "", "Activates the next window in a window group that was defined with <a href=\"" + website + "GroupAdd.htm\">GroupAdd</a>.<br><p>See <a href=\"" + website + "GroupActivate.htm\">GroupActivate</a></p>"));
        code.addCompletion(variableCompletion(code, "GroupAdd", "", "Adds a window specification to a window group, creating the group if necessary.<br><p>See <a href=\"" + website + "GroupAdd.htm\">GroupAdd</a></p>"));
        code.addCompletion(variableCompletion(code, "GroupClose", "", "Closes the active window if it was just activated by <a href=\"" + website + "GroupActivate.htm\">GroupActivate</a> or <a href=\"" + website + "GroupDeactivate.htm\">GroupDeactivate</a>. It then activates the next window in the series. It can also close all windows in a group.<br><p>See <a href=\"" + website + "GroupClose.htm\">GroupClose</a></p>"));
        code.addCompletion(variableCompletion(code, "GroupDeactivate", "", "Similar to <a href=\"" + website + "GroupActivate.htm\">GroupActivate</a> except activates the next window <strong>not</strong> in the group.<br><p>See <a href=\"" + website + "GroupDeactivate.htm\">GroupDeactivate</a></p>"));
        code.addCompletion(variableCompletion(code, "Gui", "", "Creates and manages windows and controls. Such windows can be used as data entry forms or custom user interfaces.<br><p>See <a href=\"" + website + "Gui.htm\">Gui</a></p>"));
        code.addCompletion(variableCompletion(code, "GuiControl", "", "Makes a variety of changes to a control in a GUI window.<br><p>See <a href=\"" + website + "GuiControl.htm\">GuiControl</a></p>"));
        code.addCompletion(variableCompletion(code, "GuiControlGet", "", "Retrieves various types of information about a control in a GUI window.<br><p>See <a href=\"" + website + "GuiControlGet.htm\">GuiControlGet</a></p>"));
        code.addCompletion(variableCompletion(code, "Hotkey", "", "Creates, modifies, enables, or disables a hotkey while the script is running.<br><p>See <a href=\"" + website + "Hotkey.htm\">Hotkey</a></p>"));
        code.addCompletion(variableCompletion(code, "ImageSearch", "", "Searches a region of the screen for an image.<br><p>See <a href=\"" + website + "ImageSearch.htm\">ImageSearch</a></p>"));
        code.addCompletion(variableCompletion(code, "IniDelete", "", "Deletes a value from a standard format .ini file.<br><p>See <a href=\"" + website + "IniDelete.htm\">IniDelete</a></p>"));
        code.addCompletion(variableCompletion(code, "IniRead", "", "Reads a value, section or list of section names from a standard format .ini file.<br><p>See <a href=\"" + website + "IniRead.htm\">IniRead</a></p>"));
        code.addCompletion(variableCompletion(code, "IniWrite", "", "Writes a value or section to a standard format .ini file.<br><p>See <a href=\"" + website + "IniWrite.htm\">IniWrite</a></p>"));
        code.addCompletion(variableCompletion(code, "Input", "", "Waits for the user to type a string.<br><p>See <a href=\"" + website + "Input.htm\">Input</a></p>"));
        code.addCompletion(variableCompletion(code, "InputBox", "", "Displays an input box to ask the user to enter a string.<br><p>See <a href=\"" + website + "InputBox.htm\">InputBox</a></p>"));
        code.addCompletion(variableCompletion(code, "KeyHistory", "", "Displays script info and a history of the most recent keystrokes and mouse clicks.<br><p>See <a href=\"" + website + "KeyHistory.htm\">KeyHistory</a></p>"));
        code.addCompletion(variableCompletion(code, "KeyWait", "", "Waits for a key or mouse/joystick button to be released or pressed down.<br><p>See <a href=\"" + website + "KeyWait.htm\">KeyWait</a></p>"));
        code.addCompletion(variableCompletion(code, "ListHotkeys", "", "Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the <a href=\"" + website + "_InstallKeybdHook.htm\">keyboard</a> or <a href=\"" + website + "_InstallMouseHook.htm\">mouse</a> hook.<br><p>See <a href=\"" + website + "ListHotkeys.htm\">ListHotkeys</a></p>"));
        code.addCompletion(variableCompletion(code, "ListLines", "", "Displays the script lines most recently executed.<br><p>See <a href=\"" + website + "ListLines.htm\">ListLines</a></p>"));
        code.addCompletion(variableCompletion(code, "ListVars", "", "Displays the script's <a href=\"" + website + "../Variables.htm\">variables</a>: their names and current contents.<br><p>See <a href=\"" + website + "ListVars.htm\">ListVars</a></p>"));
        code.addCompletion(variableCompletion(code, "Menu", "", "Creates, deletes, modifies and displays menus and menu items. Changes the tray icon and its tooltip. Controls whether the main window of a <a href=\"" + website + "../Scripts.htm#ahk2exe\">compiled script</a> can be opened.<br><p>See <a href=\"" + website + "Menu.htm\">Menu</a></p>"));
        code.addCompletion(variableCompletion(code, "MouseClick", "", "Clicks or holds down a mouse button, or turns the mouse wheel. NOTE: The <a href=\"" + website + "Click.htm\">Click command</a> is generally more flexible and easier to use.<br><p>See <a href=\"" + website + "MouseClick.htm\">MouseClick</a></p>"));
        code.addCompletion(variableCompletion(code, "MouseClickDrag", "", "Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button.<br><p>See <a href=\"" + website + "MouseClickDrag.htm\">MouseClickDrag</a></p>"));
        code.addCompletion(variableCompletion(code, "MouseGetPos", "", "Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.<br><p>See <a href=\"" + website + "MouseGetPos.htm\">MouseGetPos</a></p>"));
        code.addCompletion(variableCompletion(code, "MouseMove", "", "Moves the mouse cursor.<br><p>See <a href=\"" + website + "MouseMove.htm\">MouseMove</a></p>"));
        code.addCompletion(variableCompletion(code, "MsgBox", "", "Displays the specified text in a small window containing one or more buttons (such as Yes and No).<br><p>See <a href=\"" + website + "MsgBox.htm\">MsgBox</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjClone", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Clone\">ObjClone</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjCount", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Count\">ObjCount</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjDelete", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Delete\">ObjDelete</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjGetAddress", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#GetAddress\">ObjGetAddress</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjGetCapacity", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#GetCapacity\">ObjGetCapacity</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjHasKey", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#HasKey\">ObjHasKey</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjInsert", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Insert\">ObjInsert</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjInsertAt", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#InsertAt\">ObjInsertAt</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjLength", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Length\">ObjLength</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjMaxIndex", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#MinMaxIndex\">ObjMaxIndex</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjMinIndex", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#MinMaxIndex\">ObjMinIndex</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjNewEnum", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#NewEnum\">ObjNewEnum</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjPop", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Pop\">ObjPop</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjPush", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Push\">ObjPush</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjRemove", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#Remove\">ObjRemove</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjRemoveAt", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#RemoveAt\">ObjRemoveAt</a></p>"));
        code.addCompletion(variableCompletion(code, "ObjSetCapacity", "", "These functions are equivalent to built-in methods of the <a href=\"" + website + "../objects/Object.htm\">Object</a> type. It is usually recommended to use the corresponding method instead.<br><p>See <a href=\"" + website + "../objects/Object.htm#SetCapacity\">ObjSetCapacity</a></p>"));
        code.addCompletion(variableCompletion(code, "OnExit", "", "Specifies a <a href=\"" + website + "Gosub.htm\">subroutine</a> to run automatically when the script exits.<br><p>See <a href=\"" + website + "OnExit.htm#command\">OnExit</a></p>"));
        code.addCompletion(variableCompletion(code, "OutputDebug", "", "Sends a string to the debugger (if any) for display.<br><p>See <a href=\"" + website + "OutputDebug.htm\">OutputDebug</a></p>"));
        code.addCompletion(variableCompletion(code, "Pause", "", "Pauses the script's <a href=\"" + website + "../misc/Threads.htm\">current thread</a>.<br><p>See <a href=\"" + website + "Pause.htm\">Pause</a></p>"));
        code.addCompletion(variableCompletion(code, "PixelGetColor", "", "Retrieves  the color of the pixel at the specified x,y coordinates.<br><p>See <a href=\"" + website + "PixelGetColor.htm\">PixelGetColor</a></p>"));
        code.addCompletion(variableCompletion(code, "PixelSearch", "", "Searches a region of the screen for a pixel of the specified color.<br><p>See <a href=\"" + website + "PixelSearch.htm\">PixelSearch</a></p>"));
        code.addCompletion(variableCompletion(code, "PostMessage", "", "Places a message in the message queue of a window or control.<br><p>See <a href=\"" + website + "PostMessage.htm\">PostMessage</a></p>"));
        code.addCompletion(variableCompletion(code, "Process", "", "Performs one of the following operations on a process: checks if it exists; changes its priority; closes it; waits for it to close.<br><p>See <a href=\"" + website + "Process.htm\">Process</a></p>"));
        code.addCompletion(variableCompletion(code, "Progress", "", "Creates or updates a window containing a progress bar.<br><p>See <a href=\"" + website + "Progress.htm\">Progress</a></p>"));
        code.addCompletion(variableCompletion(code, "Random", "", "Generates a pseudo-random number.<br><p>See <a href=\"" + website + "Random.htm\">Random</a></p>"));
        code.addCompletion(variableCompletion(code, "RegDelete", "", "Deletes a subkey or value from the registry.<br><p>See <a href=\"" + website + "RegDelete.htm\">RegDelete</a></p>"));
        code.addCompletion(variableCompletion(code, "RegRead", "", "Reads a value from the registry.<br><p>See <a href=\"" + website + "RegRead.htm\">RegRead</a></p>"));
        code.addCompletion(variableCompletion(code, "RegWrite", "", "Writes a value to the registry.<br><p>See <a href=\"" + website + "RegWrite.htm\">RegWrite</a></p>"));
        code.addCompletion(variableCompletion(code, "Reload", "", "Replaces the currently running instance of the script with a new one.<br><p>See <a href=\"" + website + "Reload.htm\">Reload</a></p>"));
        code.addCompletion(variableCompletion(code, "Return", "", "Returns from a subroutine to which execution had previously jumped via <a href=\"" + website + "../Functions.htm\">function-call</a>, <a href=\"" + website + "Gosub.htm\">Gosub</a>, <a href=\"" + website + "../Hotkeys.htm\">Hotkey</a> activation, <a href=\"" + website + "GroupActivate.htm\">GroupActivate</a>, or other means.<br><p>See <a href=\"" + website + "Return.htm\">Return</a></p>"));
        code.addCompletion(variableCompletion(code, "Run", "", "Runs an external program.<br><p>See <a href=\"" + website + "Run.htm\">Run</a></p>"));
        code.addCompletion(variableCompletion(code, "RunAs", "", "Specifies a set of user credentials to use for all subsequent uses of <a href=\"" + website + "Run.htm\">Run</a> and <a href=\"" + website + "Run.htm\">RunWait</a>.<br><p>See <a href=\"" + website + "RunAs.htm\">RunAs</a></p>"));
        code.addCompletion(variableCompletion(code, "RunWait", "", "Runs an external program and waits until it finishes.<br><p>See <a href=\"" + website + "Run.htm\">RunWait</a></p>"));
        code.addCompletion(variableCompletion(code, "Send", "", "Sends simulated keystrokes and mouse clicks to the <a href=\"" + website + "WinActivate.htm\">active</a> window.<br><p>See <a href=\"" + website + "Send.htm\">Send</a></p>"));
        code.addCompletion(variableCompletion(code, "SendRaw", "", "Sends simulated keystrokes and mouse clicks to the <a href=\"" + website + "WinActivate.htm\">active</a> window.<br><p>See <a href=\"" + website + "Send.htm#SendRaw\">SendRaw</a></p>"));
        code.addCompletion(variableCompletion(code, "SendInput", "", "Sends simulated keystrokes and mouse clicks to the <a href=\"" + website + "WinActivate.htm\">active</a> window.<br><p>See <a href=\"" + website + "Send.htm#SendInput\">SendInput</a></p>"));
        code.addCompletion(variableCompletion(code, "SendPlay", "", "Sends simulated keystrokes and mouse clicks to the <a href=\"" + website + "WinActivate.htm\">active</a> window.<br><p>See <a href=\"" + website + "Send.htm#SendPlay\">SendPlay</a></p>"));
        code.addCompletion(variableCompletion(code, "SendEvent", "", "Sends simulated keystrokes and mouse clicks to the <a href=\"" + website + "WinActivate.htm\">active</a> window.<br><p>See <a href=\"" + website + "Send.htm#SendEvent\">SendEvent</a></p>"));
        code.addCompletion(variableCompletion(code, "SendLevel", "", "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.<br><p>See <a href=\"" + website + "SendLevel.htm\">SendLevel</a></p>"));
        code.addCompletion(variableCompletion(code, "SendMessage", "", "Sends a message to a window or control and waits for acknowledgement.<br><p>See <a href=\"" + website + "PostMessage.htm\">SendMessage</a></p>"));
        code.addCompletion(variableCompletion(code, "SendMode", "", "Makes <a href=\"" + website + "Send.htm\">Send</a> synonymous with SendInput or SendPlay rather than the default (SendEvent). Also makes Click and MouseMove/Click/Drag use the specified method.<br><p>See <a href=\"" + website + "SendMode.htm\">SendMode</a></p>"));
        code.addCompletion(variableCompletion(code, "SetBatchLines", "", "Determines how fast a script will run (affects CPU utilization).<br><p>See <a href=\"" + website + "SetBatchLines.htm\">SetBatchLines</a></p>"));
        code.addCompletion(variableCompletion(code, "SetCapsLockState", "", "Sets the state of <kbd>CapsLock</kbd>. Can also force the key to stay on or off.<br><p>See <a href=\"" + website + "SetNumScrollCapsLockState.htm\">SetCapsLockState</a></p>"));
        code.addCompletion(variableCompletion(code, "SetControlDelay", "", "Sets the delay that will occur after each control-modifying command.<br><p>See <a href=\"" + website + "SetControlDelay.htm\">SetControlDelay</a></p>"));
        code.addCompletion(variableCompletion(code, "SetDefaultMouseSpeed", "", "Sets the mouse speed that will be used if unspecified in <a href=\"" + website + "Click.htm\">Click</a> and <a href=\"" + website + "MouseMove.htm\">MouseMove</a>/<a href=\"" + website + "MouseClick.htm\">Click</a>/<a href=\"" + website + "MouseClickDrag.htm\">Drag</a>.<br><p>See <a href=\"" + website + "SetDefaultMouseSpeed.htm\">SetDefaultMouseSpeed</a></p>"));
        code.addCompletion(variableCompletion(code, "SetEnv", "", "Assigns the specified value to a <a href=\"" + website + "../Variables.htm\">variable</a>.<br><p>See <a href=\"" + website + "SetEnv.htm\">SetEnv (Var = Value)</a></p>"));
        code.addCompletion(variableCompletion(code, "SetFormat", "", "Sets the format of integers and floating point numbers generated by math operations.<br><p>See <a href=\"" + website + "SetFormat.htm\">SetFormat</a></p>"));
        code.addCompletion(variableCompletion(code, "SetKeyDelay", "", "Sets the delay that will occur after each keystroke sent by <a href=\"" + website + "Send.htm\">Send</a> or <a href=\"" + website + "ControlSend.htm\">ControlSend</a>.<br><p>See <a href=\"" + website + "SetKeyDelay.htm\">SetKeyDelay</a></p>"));
        code.addCompletion(variableCompletion(code, "SetMouseDelay", "", "Sets the delay that will occur after each mouse movement or click.<br><p>See <a href=\"" + website + "SetMouseDelay.htm\">SetMouseDelay</a></p>"));
        code.addCompletion(variableCompletion(code, "SetNumLockState", "", "Sets the state of <kbd>NumLock</kbd>. Can also force the key to stay on or off.<br><p>See <a href=\"" + website + "SetNumScrollCapsLockState.htm\">SetNumLockState</a></p>"));
        code.addCompletion(variableCompletion(code, "SetScrollLockState", "", "Sets the state of <kbd>ScrollLock</kbd>. Can also force the key to stay on or off.<br><p>See <a href=\"" + website + "SetNumScrollCapsLockState.htm\">SetScrollLockState</a></p>"));
        code.addCompletion(variableCompletion(code, "SetRegView", "", "Sets the registry view used by <a href=\"" + website + "RegRead.htm\">RegRead</a>, <a href=\"" + website + "RegWrite.htm\">RegWrite</a>, <a href=\"" + website + "RegDelete.htm\">RegDelete</a> and <a href=\"" + website + "LoopReg.htm\">registry loops</a>, allowing them in a 32-bit script to access the 64-bit registry view and vice versa.<br><p>See <a href=\"" + website + "SetRegView.htm\">SetRegView</a></p>"));
        code.addCompletion(variableCompletion(code, "SetStoreCapsLockMode", "", "Whether to restore the state of <kbd>CapsLock</kbd> after a <a href=\"" + website + "Send.htm\">Send</a>.<br><p>See <a href=\"" + website + "SetStoreCapslockMode.htm\">SetStoreCapsLockMode</a></p>"));
        code.addCompletion(variableCompletion(code, "SetTimer", "", "Causes a subroutine to be launched automatically and repeatedly at a specified time interval.<br><p>See <a href=\"" + website + "SetTimer.htm\">SetTimer</a></p>"));
        code.addCompletion(variableCompletion(code, "SetTitleMatchMode", "", "Sets the matching behavior of the WinTitle parameter in commands such as <a href=\"" + website + "WinWait.htm\">WinWait</a>.<br><p>See <a href=\"" + website + "SetTitleMatchMode.htm\">SetTitleMatchMode</a></p>"));
        code.addCompletion(variableCompletion(code, "SetWinDelay", "", "Sets the delay that will occur after each windowing command, such as <a href=\"" + website + "WinActivate.htm\">WinActivate</a>.<br><p>See <a href=\"" + website + "SetWinDelay.htm\">SetWinDelay</a></p>"));
        code.addCompletion(variableCompletion(code, "SetWorkingDir", "", "Changes the script's current working directory.<br><p>See <a href=\"" + website + "SetWorkingDir.htm\">SetWorkingDir</a></p>"));
        code.addCompletion(variableCompletion(code, "Shutdown", "", "Shuts down, restarts, or logs off the system.<br><p>See <a href=\"" + website + "Shutdown.htm\">Shutdown</a></p>"));
        code.addCompletion(variableCompletion(code, "Sleep", "", "Waits the specified amount of time before continuing.<br><p>See <a href=\"" + website + "Sleep.htm\">Sleep</a></p>"));
        code.addCompletion(variableCompletion(code, "Sort", "", "Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).<br><p>See <a href=\"" + website + "Sort.htm\">Sort</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundBeep", "", "Emits a tone from the PC speaker.<br><p>See <a href=\"" + website + "SoundBeep.htm\">SoundBeep</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundGet", "", "Retrieves various settings of a sound device (master mute, master volume, etc.)<br><p>See <a href=\"" + website + "SoundGet.htm\">SoundGet</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundGetWaveVolume", "", "Retrieves the wave output volume of a sound device.<br><p>See <a href=\"" + website + "SoundGetWaveVolume.htm\">SoundGetWaveVolume</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundPlay", "", "Plays a sound, video, or other supported file type.<br><p>See <a href=\"" + website + "SoundPlay.htm\">SoundPlay</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundSet", "", "Changes various settings of a sound device (master mute, master volume, etc.)<br><p>See <a href=\"" + website + "SoundSet.htm\">SoundSet</a></p>"));
        code.addCompletion(variableCompletion(code, "SoundSetWaveVolume", "", "Changes the wave output volume of a sound device.<br><p>See <a href=\"" + website + "SoundSetWaveVolume.htm\">SoundSetWaveVolume</a></p>"));
        code.addCompletion(variableCompletion(code, "SplashImage", "", "Creates or updates a window containing an image.<br><p>See <a href=\"" + website + "Progress.htm\">SplashImage</a></p>"));
        code.addCompletion(variableCompletion(code, "SplashTextOn", "", "Creates a customizable text popup window.<br><p>See <a href=\"" + website + "SplashTextOn.htm\">SplashTextOn / SplashTextOff</a></p>"));
        code.addCompletion(variableCompletion(code, "SplashTextOff", "", "Removes the customizable text popup window.<br><p>See <a href=\"" + website + "SplashTextOn.htm\">SplashTextOn / SplashTextOff</a></p>"));
        code.addCompletion(variableCompletion(code, "SplitPath", "", "Separates a file name or URL into its name, directory, extension, and drive.<br><p>See <a href=\"" + website + "SplitPath.htm\">SplitPath</a></p>"));
        code.addCompletion(variableCompletion(code, "StatusBarGetText", "", "Retrieves the text from a standard status bar control.<br><p>See <a href=\"" + website + "StatusBarGetText.htm\">StatusBarGetText</a></p>"));
        code.addCompletion(variableCompletion(code, "StatusBarWait", "", "Waits until a window's status bar contains the specified string.<br><p>See <a href=\"" + website + "StatusBarWait.htm\">StatusBarWait</a></p>"));
        code.addCompletion(variableCompletion(code, "StringCaseSense", "", "Determines whether string comparisons are case sensitive (default is \"not case sensitive\").<br><p>See <a href=\"" + website + "StringCaseSense.htm\">StringCaseSense</a></p>"));
        code.addCompletion(variableCompletion(code, "StringGetPos", "", "Retrieves the position of the specified substring within a string.<br><p>See <a href=\"" + website + "StringGetPos.htm\">StringGetPos</a></p>"));
        code.addCompletion(variableCompletion(code, "StringLeft", "", "Retrieves a number of characters from the left-hand side of a string.<br><p>See <a href=\"" + website + "StringLeft.htm\">StringLeft</a></p>"));
        code.addCompletion(variableCompletion(code, "StringLen", "", "Retrieves the count of how many characters are in a string.<br><p>See <a href=\"" + website + "StringLen.htm\">StringLen</a></p>"));
        code.addCompletion(variableCompletion(code, "StringLower", "", "Converts a string to lowercase.<br><p>See <a href=\"" + website + "StringLower.htm\">StringLower</a></p>"));
        code.addCompletion(variableCompletion(code, "StringMid", "", "Retrieves one or more characters from the specified position in a string.<br><p>See <a href=\"" + website + "StringMid.htm\">StringMid</a></p>"));
        code.addCompletion(variableCompletion(code, "StringReplace", "", "Replaces the specified substring with a new string.<br><p>See <a href=\"" + website + "StringReplace.htm\">StringReplace</a></p>"));
        code.addCompletion(variableCompletion(code, "StringRight", "", "Retrieves a number of characters from the right-hand side of a string.<br><p>See <a href=\"" + website + "StringLeft.htm\">StringRight</a></p>"));
        code.addCompletion(variableCompletion(code, "StringSplit", "", "Separates a string into an array of substrings using the specified delimiters.<br><p>See <a href=\"" + website + "StringSplit.htm\">StringSplit</a></p>"));
        code.addCompletion(variableCompletion(code, "StringTrimLeft", "", "Removes a number of characters from the left-hand side of a string.<br><p>See <a href=\"" + website + "StringTrimLeft.htm\">StringTrimLeft</a></p>"));
        code.addCompletion(variableCompletion(code, "StringTrimRight", "", "Removes a number of characters from the right-hand side of a string.<br><p>See <a href=\"" + website + "StringTrimLeft.htm\">StringTrimRight</a></p>"));
        code.addCompletion(variableCompletion(code, "StringUpper", "", "Converts a string to uppercase.<br><p>See <a href=\"" + website + "StringLower.htm\">StringUpper</a></p>"));
        code.addCompletion(variableCompletion(code, "Suspend", "", "Disables or enables all or selected <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>.<br><p>See <a href=\"" + website + "Suspend.htm\">Suspend</a></p>"));
        code.addCompletion(variableCompletion(code, "SysGet", "", "Retrieves screen resolution, multi-monitor info,  dimensions of system objects, and other system properties.<br><p>See <a href=\"" + website + "SysGet.htm\">SysGet</a></p>"));
        code.addCompletion(variableCompletion(code, "Thread", "", "Sets the priority or interruptibility of <a href=\"" + website + "../misc/Threads.htm\">threads</a>. It can also temporarily disable all <a href=\"" + website + "SetTimer.htm\">timers</a>.<br><p>See <a href=\"" + website + "Thread.htm\">Thread</a></p>"));
        code.addCompletion(variableCompletion(code, "ToolTip", "", "Creates an always-on-top window anywhere on the screen.<br><p>See <a href=\"" + website + "ToolTip.htm\">ToolTip</a></p>"));
        code.addCompletion(variableCompletion(code, "Transform", "", "Performs miscellaneous math functions, bitwise operations, and tasks such as ASCII/Unicode conversion.<br><p>See <a href=\"" + website + "Transform.htm\">Transform</a></p>"));
        code.addCompletion(variableCompletion(code, "TrayTip", "", "Creates a balloon message window near the tray icon. On Windows 10, a toast notification may be shown instead.<br><p>See <a href=\"" + website + "TrayTip.htm\">TrayTip</a></p>"));
        code.addCompletion(variableCompletion(code, "UrlDownloadToFile", "", "Downloads a file from the Internet.<br><p>See <a href=\"" + website + "URLDownloadToFile.htm\">UrlDownloadToFile</a></p>"));
        code.addCompletion(variableCompletion(code, "WinActivate", "", "Activates the specified window.<br><p>See <a href=\"" + website + "WinActivate.htm\">WinActivate</a></p>"));
        code.addCompletion(variableCompletion(code, "WinActivateBottom", "", "Same as <a href=\"" + website + "WinActivate.htm\">WinActivate</a> except that it activates the bottommost matching window rather than the topmost.<br><p>See <a href=\"" + website + "WinActivateBottom.htm\">WinActivateBottom</a></p>"));
        code.addCompletion(variableCompletion(code, "WinClose", "", "Closes the specified window.<br><p>See <a href=\"" + website + "WinClose.htm\">WinClose</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetActiveStats", "", "Combines the functions of <a href=\"" + website + "WinGetActiveTitle.htm\">WinGetActiveTitle</a> and <a href=\"" + website + "WinGetPos.htm\">WinGetPos</a> into one command.<br><p>See <a href=\"" + website + "WinGetActiveStats.htm\">WinGetActiveStats</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetActiveTitle", "", "Retrieves the title of the active window.<br><p>See <a href=\"" + website + "WinGetActiveTitle.htm\">WinGetActiveTitle</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetClass", "", "Retrieves the specified window's class name.<br><p>See <a href=\"" + website + "WinGetClass.htm\">WinGetClass</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGet", "", "Retrieves the specified window's unique ID, process ID, process name, or a list of its controls. It can also retrieve a list of all windows matching the specified criteria.<br><p>See <a href=\"" + website + "WinGet.htm\">WinGet</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetPos", "", "Retrieves the position and size of the specified window.<br><p>See <a href=\"" + website + "WinGetPos.htm\">WinGetPos</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetText", "", "Retrieves the text from the specified window.<br><p>See <a href=\"" + website + "WinGetText.htm\">WinGetText</a></p>"));
        code.addCompletion(variableCompletion(code, "WinGetTitle", "", "Retrieves the title of the specified window.<br><p>See <a href=\"" + website + "WinGetTitle.htm\">WinGetTitle</a></p>"));
        code.addCompletion(variableCompletion(code, "WinHide", "", "Hides the specified window.<br><p>See <a href=\"" + website + "WinHide.htm\">WinHide</a></p>"));
        code.addCompletion(variableCompletion(code, "WinKill", "", "Forces the specified window to close.<br><p>See <a href=\"" + website + "WinKill.htm\">WinKill</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMaximize", "", "Enlarges the specified window to its maximum size.<br><p>See <a href=\"" + website + "WinMaximize.htm\">WinMaximize</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMenuSelectItem", "", "Invokes a menu item from the menu bar of the specified window.<br><p>See <a href=\"" + website + "WinMenuSelectItem.htm\">WinMenuSelectItem</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMinimize", "", "Collapses the specified window into a button on the task bar.<br><p>See <a href=\"" + website + "WinMinimize.htm\">WinMinimize</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMinimizeAll", "", "Minimizes all windows.<br><p>See <a href=\"" + website + "WinMinimizeAll.htm\">WinMinimizeAll / WinMinimizeAllUndo</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMinimizeAllUndo", "", "Unminimizes all windows.<br><p>See <a href=\"" + website + "WinMinimizeAll.htm\">WinMinimizeAll / WinMinimizeAllUndo</a></p>"));
        code.addCompletion(variableCompletion(code, "WinMove", "", "Changes the position and/or size of the specified window.<br><p>See <a href=\"" + website + "WinMove.htm\">WinMove</a></p>"));
        code.addCompletion(variableCompletion(code, "WinRestore", "", "Unminimizes or unmaximizes the specified window if it is minimized or maximized.<br><p>See <a href=\"" + website + "WinRestore.htm\">WinRestore</a></p>"));
        code.addCompletion(variableCompletion(code, "WinSet", "", "Makes a variety of changes to the specified window, such as \"always on top\" and transparency.<br><p>See <a href=\"" + website + "WinSet.htm\">WinSet</a></p>"));
        code.addCompletion(variableCompletion(code, "WinSetTitle", "", "Changes the title of the specified window.<br><p>See <a href=\"" + website + "WinSetTitle.htm\">WinSetTitle</a></p>"));
        code.addCompletion(variableCompletion(code, "WinShow", "", "Unhides the specified window.<br><p>See <a href=\"" + website + "WinShow.htm\">WinShow</a></p>"));
        code.addCompletion(variableCompletion(code, "WinWait", "", "Waits until the specified window exists.<br><p>See <a href=\"" + website + "WinWait.htm\">WinWait</a></p>"));
        code.addCompletion(variableCompletion(code, "WinWaitActive", "", "Waits until the specified window is active.<br><p>See <a href=\"" + website + "WinWaitActive.htm\">WinWaitActive / WinWaitNotActive</a></p>"));
        code.addCompletion(variableCompletion(code, "WinWaitNotActive", "", "Waits until the specified window is not active.<br><p>See <a href=\"" + website + "WinWaitActive.htm\">WinWaitActive / WinWaitNotActive</a></p>"));
        code.addCompletion(variableCompletion(code, "WinWaitClose", "", "Waits until the specified window does not exist.<br><p>See <a href=\"" + website + "WinWaitClose.htm\">WinWaitClose</a></p>"));
        // Directives
        code.addCompletion(variableCompletion(code, "#ClipboardTimeout", "", "Changes how long the script keeps trying to access the clipboard when the first attempt fails.<br><p>See <a href=\"" + website + "_ClipboardTimeout.htm\">#ClipboardTimeout</a></p>"));
        code.addCompletion(variableCompletion(code, "#CommentFlag", "", "Changes the script's comment symbol from semicolon to some other string.<br><p>See <a href=\"" + website + "_CommentFlag.htm\">#CommentFlag</a></p>"));
        code.addCompletion(variableCompletion(code, "#Delimiter", "", "Changes the script's command parameter delimiter from comma to some other character.<br><p>See <a href=\"" + website + "_EscapeChar.htm#Delimiter\">#Delimiter</a></p>"));
        code.addCompletion(variableCompletion(code, "#DerefChar", "", "Changes the script's dereference symbol from percent to some other character.<br><p>See <a href=\"" + website + "_EscapeChar.htm#DerefChar\">#DerefChar</a></p>"));
        code.addCompletion(variableCompletion(code, "#ErrorStdOut", "", "Sends any syntax error that prevents a script from launching to the standard error stream (stderr) rather than displaying a dialog.<br><p>See <a href=\"" + website + "_ErrorStdOut.htm\">#ErrorStdOut</a></p>"));
        code.addCompletion(variableCompletion(code, "#EscapeChar", "", "Changes the script's escape character (e.g. backslash vs. accent).<br><p>See <a href=\"" + website + "_EscapeChar.htm\">#EscapeChar</a></p>"));
        code.addCompletion(variableCompletion(code, "#HotkeyInterval", "", "Along with <a href=\"" + website + "_MaxHotkeysPerInterval.htm\">#MaxHotkeysPerInterval</a>, specifies the rate of <a href=\"" + website + "../Hotkeys.htm\">hotkey</a> activations beyond which a warning dialog will be displayed.<br><p>See <a href=\"" + website + "_HotkeyInterval.htm\">#HotkeyInterval</a></p>"));
        code.addCompletion(variableCompletion(code, "#HotkeyModifierTimeout", "", "Affects the behavior of <a href=\"" + website + "../Hotkeys.htm\">hotkey</a> modifiers: <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd>, and <kbd>Shift</kbd>.<br><p>See <a href=\"" + website + "_HotkeyModifierTimeout.htm\">#HotkeyModifierTimeout</a></p>"));
        code.addCompletion(variableCompletion(code, "#Hotstring", "", "Changes <a href=\"" + website + "../Hotstrings.htm\">hotstring</a> options or ending characters.<br><p>See <a href=\"" + website + "_Hotstring.htm\">#Hotstring</a></p>"));
        code.addCompletion(variableCompletion(code, "#If", "", "Creates context-sensitive <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the result of an expression.<br><p>See <a href=\"" + website + "_If.htm\">#If</a></p>"));
        code.addCompletion(variableCompletion(code, "#IfTimeout", "", "Sets the maximum time that may be spent evaluating a single #If expression.<br><p>See <a href=\"" + website + "_IfTimeout.htm\">#IfTimeout</a></p>"));
        code.addCompletion(variableCompletion(code, "#IfWinActive", "", "Creates context-sensitive <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the type of window that is active or exists.<br><p>See <a href=\"" + website + "_IfWinActive.htm\">#IfWinActive / #IfWinNotActive / #IfWinExist / #IfWinNotExist</a></p>"));
        code.addCompletion(variableCompletion(code, "#IfWinNotActive", "", "Creates context-sensitive <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the type of window that is active or exists.<br><p>See <a href=\"" + website + "_IfWinActive.htm\">#IfWinActive / #IfWinNotActive / #IfWinExist / #IfWinNotExist</a></p>"));
        code.addCompletion(variableCompletion(code, "#IfWinExist", "", "Creates context-sensitive <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the type of window that is active or exists.<br><p>See <a href=\"" + website + "_IfWinActive.htm\">#IfWinActive / #IfWinNotActive / #IfWinExist / #IfWinNotExist</a></p>"));
        code.addCompletion(variableCompletion(code, "#IfWinNotExist", "", "Creates context-sensitive <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> and <a href=\"" + website + "../Hotstrings.htm\">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on the type of window that is active or exists.<br><p>See <a href=\"" + website + "_IfWinActive.htm\">#IfWinActive / #IfWinNotActive / #IfWinExist / #IfWinNotExist</a></p>"));
        code.addCompletion(variableCompletion(code, "#Include", "", "Causes the script to behave as though the specified file's contents are present at this exact position.<br><p>See <a href=\"" + website + "_Include.htm\">#Include / #IncludeAgain</a></p>"));
        code.addCompletion(variableCompletion(code, "#IncludeAgain", "", "Causes the script to behave as though the specified file's contents are present at this exact position.<br><p>See <a href=\"" + website + "_Include.htm\">#Include / #IncludeAgain</a></p>"));
        code.addCompletion(variableCompletion(code, "#InputLevel", "", "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.<br><p>See <a href=\"" + website + "_InputLevel.htm\">#InputLevel</a></p>"));
        code.addCompletion(variableCompletion(code, "#InstallKeybdHook", "", "Forces the unconditional installation of the keyboard hook.<br><p>See <a href=\"" + website + "_InstallKeybdHook.htm\">#InstallKeybdHook</a></p>"));
        code.addCompletion(variableCompletion(code, "#InstallMouseHook", "", "Forces the unconditional installation of the mouse hook.<br><p>See <a href=\"" + website + "_InstallMouseHook.htm\">#InstallMouseHook</a></p>"));
        code.addCompletion(variableCompletion(code, "#KeyHistory", "", "Sets the maximum number of keyboard and mouse events displayed by the <a href=\"" + website + "KeyHistory.htm\">KeyHistory</a> window. You can set it to 0 to disable key history.<br><p>See <a href=\"" + website + "_KeyHistory.htm\">#KeyHistory</a></p>"));
        code.addCompletion(variableCompletion(code, "#LTrim", "", "Enables or disables trimming of indentation in continuation sections.<br><p>See <a href=\"" + website + "../Scripts.htm#LTrim\">#LTrim</a></p>"));
        code.addCompletion(variableCompletion(code, "#MaxHotkeysPerInterval", "", "Along with <a href=\"" + website + "_HotkeyInterval.htm\">#HotkeyInterval</a>, specifies the rate of <a href=\"" + website + "../Hotkeys.htm\">hotkey</a> activations beyond which a warning dialog will be displayed.<br><p>See <a href=\"" + website + "_MaxHotkeysPerInterval.htm\">#MaxHotkeysPerInterval</a></p>"));
        code.addCompletion(variableCompletion(code, "#MaxMem", "", "Sets the maximum capacity of each <a href=\"" + website + "../Variables.htm\">variable</a> to the specified number of megabytes.<br><p>See <a href=\"" + website + "_MaxMem.htm\">#MaxMem</a></p>"));
        code.addCompletion(variableCompletion(code, "#MaxThreads", "", "Sets the maximum number of simultaneous <a href=\"" + website + "../misc/Threads.htm\">threads</a>.<br><p>See <a href=\"" + website + "_MaxThreads.htm\">#MaxThreads</a></p>"));
        code.addCompletion(variableCompletion(code, "#MaxThreadsBuffer", "", "Causes some or all <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a> to buffer rather than ignore keypresses when their <a href=\"" + website + "_MaxThreadsPerHotkey.htm\">#MaxThreadsPerHotkey</a> limit has been reached.<br><p>See <a href=\"" + website + "_MaxThreadsBuffer.htm\">#MaxThreadsBuffer</a></p>"));
        code.addCompletion(variableCompletion(code, "#MaxThreadsPerHotkey", "", "Sets the maximum number of simultaneous <a href=\"" + website + "../misc/Threads.htm\">threads</a> per <a href=\"" + website + "../Hotkeys.htm\">hotkey</a> or <a href=\"" + website + "../Hotstrings.htm\">hotstring</a>.<br><p>See <a href=\"" + website + "_MaxThreadsPerHotkey.htm\">#MaxThreadsPerHotkey</a></p>"));
        code.addCompletion(variableCompletion(code, "#MenuMaskKey", "", "Changes which key is used to mask Win or Alt keyup events.<br><p>See <a href=\"" + website + "_MenuMaskKey.htm\">#MenuMaskKey</a></p>"));
        code.addCompletion(variableCompletion(code, "#NoEnv", "", "Avoids checking empty variables to see if they are environment variables (recommended for all new scripts).<br><p>See <a href=\"" + website + "_NoEnv.htm\">#NoEnv</a></p>"));
        code.addCompletion(variableCompletion(code, "#NoTrayIcon", "", "Disables the showing of a tray icon.<br><p>See <a href=\"" + website + "_NoTrayIcon.htm\">#NoTrayIcon</a></p>"));
        code.addCompletion(variableCompletion(code, "#Persistent", "", "Keeps a script permanently running (that is, until the user closes it or <a href=\"" + website + "ExitApp.htm\">ExitApp</a> is encountered).<br><p>See <a href=\"" + website + "_Persistent.htm\">#Persistent</a></p>"));
        code.addCompletion(variableCompletion(code, "#Requires", "", "Displays an error and quits if a version requirement is not met.<br><p>See <a href=\"" + website + "_Requires.htm\">#Requires</a></p>"));
        code.addCompletion(variableCompletion(code, "#SingleInstance", "", "Determines whether a script is allowed to run again when it is already running.<br><p>See <a href=\"" + website + "_SingleInstance.htm\">#SingleInstance</a></p>"));
        code.addCompletion(variableCompletion(code, "#UseHook", "", "Forces the use of the  hook to implement all or some keyboard <a href=\"" + website + "../Hotkeys.htm\">hotkeys</a>.<br><p>See <a href=\"" + website + "_UseHook.htm\">#UseHook</a></p>"));
        code.addCompletion(variableCompletion(code, "#Warn", "", "Enables or disables warnings for specific conditions which may indicate an error, such as a typo or missing \"global\" declaration.<br><p>See <a href=\"" + website + "_Warn.htm\">#Warn</a></p>"));
        code.addCompletion(variableCompletion(code, "#WinActivateForce", "", "Skips the gentle method of activating a window and goes straight to the forceful method.<br><p>See <a href=\"" + website + "_WinActivateForce.htm\">#WinActivateForce</a></p>"));

        code.setAutoActivationRules(true, "%_");
        setDefaultCompletionProvider(code);

        final DefaultCompletionProvider comment = new DefaultCompletionProvider();
        comment.addCompletion(new BasicCompletion(comment, "Ahk2Exe-"));
        comment.setAutoActivationRules(true, "@");
        setCommentCompletionProvider(comment);
    }

    public VariableCompletion variableCompletion(CompletionProvider provider,
                                                 String name,
                                                 String type,
                                                 String shortDesc) {
        final var completion = new VariableCompletion(provider, name, type);
        completion.setShortDescription(shortDesc.replace("\n", "<br>"));
        return completion;
    }

    public FunctionCompletion functionCompletion(CompletionProvider provider,
                                                 String name,
                                                 String returnType,
                                                 String shortDesc,
                                                 ParameterizedCompletion.Parameter... params) {
        final var completion = new FunctionCompletion(provider, name, returnType);
        completion.setShortDescription(shortDesc);
        completion.setParams(Arrays.asList(params));
        return completion;
    }
}
